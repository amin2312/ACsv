// Generated by Haxe 3.4.7
(function ($hx_exports) { "use strict";
$hx_exports["acsv"] = $hx_exports["acsv"] || {};
var StringTools = function() { };
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var acsv_Field = $hx_exports["acsv"]["Field"] = function() {
};
var acsv_Table = $hx_exports["acsv"]["Table"] = function() {
	this._selector = null;
	this._indexSet = { };
	this.body = [];
	this.head = [];
	this.content = null;
};
acsv_Table.Parse = function(content,filedSeparator,filedDelimiter) {
	if(filedDelimiter == null) {
		filedDelimiter = "\"";
	}
	if(filedSeparator == null) {
		filedSeparator = ",";
	}
	var table = acsv_Table.arrayToRows(acsv_Table.textToArray(content,filedSeparator,filedDelimiter));
	table.content = content;
	return table;
};
acsv_Table.textToArray = function(text,FS,FD) {
	if(FD == null) {
		FD = "\"";
	}
	if(FS == null) {
		FS = ",";
	}
	if(text.charCodeAt(0) == 0xFEFF) {
		text = text.substring(1);
	}
	var FDs = FD + FD;
	var arr = [];
	var maxLen = text.length;
	var ptr = text;
	var ptrPos = 0;
	while(true) {
		var curLen = maxLen - ptrPos;
		var cellIndexA = 0;
		var cellIndexB = 0;
		var cells = [];
		var cell = null;
		var cc = null;
		while(cellIndexB < curLen) {
			cellIndexA = cellIndexB;
			cc = ptr.charAt(ptrPos + cellIndexB);
			if(cc == "\r" && ptr.charAt(ptrPos + cellIndexB + 1) == "\n") {
				cellIndexB += 2;
				break;
			}
			if(cc == "\n") {
				++cellIndexB;
				break;
			}
			if(cc == FS) {
				cell = "";
				var nextPos = ptrPos + cellIndexB + 1;
				if(nextPos < maxLen) {
					cc = ptr.charAt(nextPos);
				} else {
					cc = "\n";
				}
				if(cellIndexA == 0 || cc == FS || cc == "\n") {
					++cellIndexB;
					cells.push("");
				} else if(cc == "\r" && ptr.charAt(ptrPos + cellIndexB + 2) == "\n") {
					cellIndexB += 2;
					cells.push("");
				} else {
					++cellIndexB;
				}
			} else if(cc == FD) {
				++cellIndexB;
				while(true) {
					cellIndexB = ptr.indexOf(FD,ptrPos + cellIndexB);
					if(cellIndexB == -1) {
						console.log("[ACsv] Invalid Double Quote");
						return null;
					}
					cellIndexB -= ptrPos;
					var nextPos1 = ptrPos + cellIndexB + 1;
					if(nextPos1 < maxLen) {
						if(ptr.charAt(nextPos1) == FD) {
							cellIndexB += 2;
							continue;
						}
					}
					break;
				}
				cell = ptr.substring(ptrPos + cellIndexA + 1,ptrPos + cellIndexB);
				cell = StringTools.replace(cell,FDs,FD);
				cells.push(cell);
				++cellIndexB;
			} else {
				var indexA = ptr.indexOf(FS,ptrPos + cellIndexB);
				if(indexA == -1) {
					indexA = curLen;
				} else {
					indexA -= ptrPos;
				}
				var indexB = ptr.indexOf("\r\n",ptrPos + cellIndexB);
				if(indexB == -1) {
					indexB = ptr.indexOf("\n",ptrPos + cellIndexB);
				}
				if(indexB == -1) {
					indexB = curLen;
				} else {
					indexB -= ptrPos;
				}
				cellIndexB = indexA;
				if(indexB < indexA) {
					cellIndexB = indexB;
				}
				cell = ptr.substring(ptrPos + cellIndexA,ptrPos + cellIndexB);
				cells.push(cell);
			}
		}
		arr.push(cells);
		ptrPos += cellIndexB;
		if(ptrPos >= maxLen) {
			break;
		}
	}
	return arr;
};
acsv_Table.arrayToRows = function(arr) {
	var rawHead = arr.shift();
	var srcBody = arr;
	var newHead = [];
	var _g1 = 0;
	var _g = rawHead.length;
	while(_g1 < _g) {
		var i = _g1++;
		var fullName = rawHead[i];
		var parts = fullName.split(":");
		var filed = new acsv_Field();
		filed.fullName = fullName;
		filed.name = parts[0];
		filed.type = parts[1];
		newHead.push(filed);
	}
	var _g11 = 0;
	var _g2 = srcBody.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var row = srcBody[i1];
		var _g3 = 0;
		var _g21 = row.length;
		while(_g3 < _g21) {
			var j = _g3++;
			var cell = row[j];
			var newVal = cell;
			var isEmptyCell = cell == null || cell == "";
			var ft = newHead[j].type;
			if(ft == "bool") {
				if(isEmptyCell || cell == "false" || cell == "0") {
					newVal = false;
				} else {
					newVal = true;
				}
			} else if(ft == "int") {
				if(isEmptyCell) {
					newVal = 0;
				} else {
					newVal = parseInt(cell);
				}
			} else if(ft == "number") {
				if(isEmptyCell) {
					newVal = 0.0;
				} else {
					newVal = parseFloat(cell);
				}
			} else if(ft == "json") {
				if(isEmptyCell) {
					newVal = null;
				} else {
					var cc = cell.charAt(0);
					if(!(cc == "[" || cc == "{")) {
						console.log("[ACsv] Invalid json format:" + newHead[j].name + "," + cell);
						return null;
					}
					newVal = cell;
				}
			} else if(ft == "strings") {
				if(isEmptyCell) {
					newVal = "[]";
				} else {
					newVal = "[\"" + cell.split(",").join("\",\"") + "\"]";
				}
			}
			row[j] = newVal;
		}
		srcBody[i1] = row;
	}
	var table = new acsv_Table();
	table.head = newHead;
	table.body = srcBody;
	return table;
};
acsv_Table.prototype = {
	merge: function(b) {
		this.body = this.body.concat(b.body);
		var index = b.content.indexOf("\r\n");
		if(index == -1) {
			index = b.content.indexOf("\n");
		}
		var c = b.content.substring(index);
		this.content += c;
		return this;
	}
	,createIndexAt: function(colIndex) {
		var m = { };
		var _g1 = 0;
		var _g = this.body.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.body[i];
			var key = row[colIndex];
			m[key] = row;
		}
		this._indexSet[colIndex] = m;
	}
	,getColIndexBy: function(name) {
		var _g1 = 0;
		var _g = this.head.length;
		while(_g1 < _g) {
			var i = _g1++;
			var field = this.head[i];
			if(field.name == name) {
				return i;
			}
		}
		return -1;
	}
	,id: function(value,colIndex) {
		if(colIndex == null) {
			colIndex = 0;
		}
		return this.selectWhenE(1,value,colIndex).toFirstObj();
	}
	,sortBy: function(colIndex,sortType) {
		var l = this._selector.length;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = l - 1;
			while(_g3 < _g2) {
				var j = _g3++;
				var ok = false;
				var a = this._selector[j][colIndex];
				var b = this._selector[j + 1][colIndex];
				if(sortType == 0 && a > b) {
					ok = true;
				} else if(sortType == 1 && a < b) {
					ok = true;
				}
				if(ok) {
					var temp = this._selector[j];
					this._selector[j] = this._selector[j + 1];
					this._selector[j + 1] = temp;
				}
			}
		}
		return this;
	}
	,getCurrentSelector: function() {
		return this._selector;
	}
	,fmtRow: function(row) {
		var obj = [];
		var _g1 = 0;
		var _g = this.head.length;
		while(_g1 < _g) {
			var i = _g1++;
			var filed = this.head[i];
			var ft = filed.type;
			var val0 = row[i];
			var val1 = null;
			if(ft != null && ft.length > 0 && acsv_Table.JSON_TYPES.indexOf(ft) != -1) {
				if(val0 != null) {
					val1 = JSON.parse(val0);
				}
			} else {
				val1 = val0;
			}
			obj.push(val1);
		}
		return obj;
	}
	,fmtObj: function(row) {
		var obj = { };
		var _g1 = 0;
		var _g = this.head.length;
		while(_g1 < _g) {
			var i = _g1++;
			var field = this.head[i];
			var name = field.name;
			var ft = field.type;
			var val0 = row[i];
			var val1 = null;
			if(ft != null && ft.length > 0 && acsv_Table.JSON_TYPES.indexOf(ft) != -1) {
				if(val0 != null) {
					val1 = JSON.parse(val0);
				}
			} else {
				val1 = val0;
			}
			obj[name] = val1;
		}
		return obj;
	}
	,toFirstRow: function() {
		var rzl = null;
		if(this._selector != null && this._selector.length > 0) {
			rzl = this.fmtRow(this._selector[0]);
		}
		this._selector = null;
		return rzl;
	}
	,toLastRow: function() {
		var rzl = null;
		if(this._selector != null) {
			var l = this._selector.length;
			if(l > 0) {
				rzl = this.fmtRow(this._selector[l - 1]);
			}
		}
		this._selector = null;
		return rzl;
	}
	,toRows: function() {
		if(this._selector == null) {
			return null;
		}
		var dst = [];
		var _g1 = 0;
		var _g = this._selector.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this._selector[i];
			dst.push(this.fmtRow(row));
		}
		this._selector = null;
		return dst;
	}
	,toFirstObj: function() {
		var rzl = null;
		if(this._selector != null && this._selector.length > 0) {
			rzl = this.fmtObj(this._selector[0]);
		}
		this._selector = null;
		return rzl;
	}
	,toLastObj: function() {
		var rzl = null;
		if(this._selector != null) {
			var l = this._selector.length;
			if(l > 0) {
				rzl = this.fmtObj(this._selector[l - 1]);
			}
		}
		this._selector = null;
		return rzl;
	}
	,toObjs: function() {
		if(this._selector == null) {
			return null;
		}
		var dst = [];
		var _g1 = 0;
		var _g = this._selector.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this._selector[i];
			dst.push(this.fmtObj(row));
		}
		this._selector = null;
		return dst;
	}
	,toTable: function() {
		if(this._selector == null) {
			return null;
		}
		var t = new acsv_Table();
		t.head = this.head.concat([]);
		t.body = this._selector;
		this._selector = null;
		return t;
	}
	,selectAll: function() {
		this._selector = this.body;
		return this;
	}
	,selectFirstRow: function() {
		this._selector = [this.body[0]];
		return this;
	}
	,selectLastRow: function() {
		this._selector = [this.body[this.body.length - 1]];
		return this;
	}
	,selectAt: function(rowIndices) {
		var dst = [];
		var maxLen = this.body.length;
		var _g1 = 0;
		var _g = rowIndices.length;
		while(_g1 < _g) {
			var i = _g1++;
			var rowIndex = rowIndices[i];
			if(rowIndex >= 0 && rowIndex < maxLen) {
				dst.push(this.body[rowIndex]);
			}
		}
		this._selector = dst;
		return this;
	}
	,selectWhenIn: function(limit,values,colIndex) {
		if(colIndex == null) {
			colIndex = 0;
		}
		var dst = [];
		var _g1 = 0;
		var _g = values.length;
		while(_g1 < _g) {
			var i = _g1++;
			var value = values[i];
			this.selectWhenE(limit,value,colIndex,dst);
			this._selector = null;
		}
		this._selector = dst;
		return this;
	}
	,selectWhenE: function(limit,value,colIndex,extraSelector) {
		if(colIndex == null) {
			colIndex = 0;
		}
		var dst = extraSelector;
		if(dst == null) {
			dst = [];
		}
		if(limit == 1) {
			var m = this._indexSet[colIndex];
			if(m != null) {
				var val = m[value];
				if(val != null) {
					dst.push(val);
				}
				this._selector = dst;
				return this;
			}
		}
		var src = this._selector;
		if(src == null) {
			src = this.body;
		}
		var _g1 = 0;
		var _g = src.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = src[i];
			if(row[colIndex] == value) {
				dst.push(row);
				--limit;
				if(limit == 0) {
					break;
				}
			}
		}
		this._selector = dst;
		return this;
	}
	,selectWhenE2: function(limit,value1,value2,colIndex2,colIndex1) {
		if(colIndex1 == null) {
			colIndex1 = 0;
		}
		if(colIndex2 == null) {
			colIndex2 = 1;
		}
		var src = this._selector;
		if(src == null) {
			src = this.body;
		}
		var dst = [];
		var _g1 = 0;
		var _g = src.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = src[i];
			if(row[colIndex1] == value1 && row[colIndex2] == value2) {
				dst.push(row);
				--limit;
				if(limit == 0) {
					break;
				}
			}
		}
		this._selector = dst;
		return this;
	}
	,selectWhenE3: function(limit,value1,value2,value3,colIndex3,colIndex2,colIndex1) {
		if(colIndex1 == null) {
			colIndex1 = 0;
		}
		if(colIndex2 == null) {
			colIndex2 = 1;
		}
		if(colIndex3 == null) {
			colIndex3 = 2;
		}
		var src = this._selector;
		if(src == null) {
			src = this.body;
		}
		var dst = [];
		var _g1 = 0;
		var _g = src.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = src[i];
			if(row[colIndex1] == value1 && row[colIndex2] == value2 && row[colIndex3] == value3) {
				dst.push(row);
				--limit;
				if(limit == 0) {
					break;
				}
			}
		}
		this._selector = dst;
		return this;
	}
	,selectWhenG: function(limit,withEqu,value,colIndex) {
		if(colIndex == null) {
			colIndex = 0;
		}
		var src = this._selector;
		if(src == null) {
			src = this.body;
		}
		var dst = [];
		var _g1 = 0;
		var _g = src.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = src[i];
			var rowVal = row[colIndex];
			if(rowVal > value || withEqu && rowVal == value) {
				dst.push(row);
				--limit;
				if(limit == 0) {
					break;
				}
			}
		}
		this._selector = dst;
		return this;
	}
	,selectWhenL: function(limit,withEqu,value,colIndex) {
		if(colIndex == null) {
			colIndex = 0;
		}
		var src = this._selector;
		if(src == null) {
			src = this.body;
		}
		var dst = [];
		var _g1 = 0;
		var _g = src.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = src[i];
			var rowVal = row[colIndex];
			if(rowVal < value || withEqu && rowVal == value) {
				dst.push(row);
				--limit;
				if(limit == 0) {
					break;
				}
			}
		}
		this._selector = dst;
		return this;
	}
	,selectWhenGreaterAndLess: function(limit,GWithEqu,LWithEqu,GValue,LValue,colIndex) {
		if(colIndex == null) {
			colIndex = 0;
		}
		var src = this._selector;
		if(src == null) {
			src = this.body;
		}
		var dst = [];
		var _g1 = 0;
		var _g = src.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = src[i];
			var rowVal = row[colIndex];
			var v1 = rowVal > GValue || GWithEqu && rowVal == GValue;
			var v2 = rowVal < LValue || LWithEqu && rowVal == LValue;
			if(v1 && v2) {
				dst.push(row);
				--limit;
				if(limit == 0) {
					break;
				}
			}
		}
		this._selector = dst;
		return this;
	}
	,selectWhenLessOrGreater: function(limit,LWithEqu,GWithEqu,LValue,GValue,colIndex) {
		if(colIndex == null) {
			colIndex = 0;
		}
		var src = this._selector;
		if(src == null) {
			src = this.body;
		}
		var dst = [];
		var _g1 = 0;
		var _g = src.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = src[i];
			var rowVal = row[colIndex];
			var v1 = rowVal < LValue || LWithEqu && rowVal == LValue;
			var v2 = rowVal > GValue || GWithEqu && rowVal == GValue;
			if(v1 || v2) {
				dst.push(row);
				--limit;
				if(limit == 0) {
					break;
				}
			}
		}
		this._selector = dst;
		return this;
	}
};
acsv_Table.JSON_TYPES = ["json","strings"];
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
