// Generated by Haxe 3.4.7
(function ($hx_exports) { "use strict";
$hx_exports["acsv"] = $hx_exports["acsv"] || {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Example = function() { };
Example.main = function() {
	Example._tab1 = acsv_Table.Parse(Example.standard_format_text);
	Example._tab2 = acsv_Table.Parse(Example.enhanced_format_text);
	Example.showTable("standard csv format",Example._tab1);
	Example.test_standard_csv_format();
	Example.showTable("enhanced csv format",Example._tab2);
	Example.test_enhanced_csv_format();
};
Example.showTables = function() {
};
Example.showTable = function(fileName,csvTable) {
	var t = window.document.getElementById("output");
	var tab = window.document.createElement("table");
	var thead = window.document.createElement("thead");
	var tr = window.document.createElement("tr");
	thead.appendChild(tr);
	var _g1 = 0;
	var _g = csvTable.head.length;
	while(_g1 < _g) {
		var i = _g1++;
		var td = window.document.createElement("td");
		var row = csvTable.head[i];
		td.innerText = row.fullName;
		tr.appendChild(td);
	}
	tab.appendChild(thead);
	var tbody = window.document.createElement("tbody");
	var _g11 = 0;
	var _g2 = csvTable.body.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var tr1 = window.document.createElement("tr");
		var rows = csvTable.body[i1];
		var _g3 = 0;
		var _g21 = rows.length;
		while(_g3 < _g21) {
			var j = _g3++;
			var td1 = window.document.createElement("td");
			var row1 = rows[j];
			td1.innerText = row1;
			tr1.appendChild(td1);
		}
		tbody.appendChild(tr1);
	}
	tab.appendChild(tbody);
	var tfoot = window.document.createElement("tfoot");
	var tr2 = window.document.createElement("tr");
	var td2 = window.document.createElement("td");
	td2.colSpan = csvTable.head.length;
	td2.innerText = fileName;
	tr2.appendChild(td2);
	tfoot.appendChild(tr2);
	tab.appendChild(tfoot);
	t.appendChild(tab);
};
Example.print = function(cmd,o) {
	var t = window.document.getElementById("output");
	var div = window.document.createElement("div");
	var span = window.document.createElement("span");
	span.innerHTML = StringTools.replace(cmd,"[enhanced]","<span class=\"E\">[enhanced]</span>");
	div.appendChild(span);
	div.title = JSON.stringify(o,null,"\t");
	div.innerHTML += JSON.stringify(o);
	t.appendChild(div);
	console.log(cmd);
	console.log(o);
};
Example.test_standard_csv_format = function() {
	Example.print("select all to rows",Example._tab1.selectAll().toROWs());
	Example.print("select all to objs",Example._tab1.selectAll().toOBJs());
	Example.print("select first row",Example._tab1.selectFirstRow().toRow());
	Example.print("select first obj",Example._tab1.selectFirstRow().toObj());
	Example.print("select last row",Example._tab1.selectLastRow().toRow());
	Example.print("select last obj",Example._tab1.selectLastRow().toObj());
	Example.print("select [id] = \"2\"",Example._tab1.selectOneWhenE("2").toObj());
	Example.print("select [id] = \"-1\"",Example._tab1.selectOneWhenE("-1").toObj());
	Example.print("select [id] = \"3\" and [id2] = \"20\"",Example._tab1.selectOneWhenE2("3","20").toObj());
	Example.print("select [id] = \"3\" and [id2] = \"-1\"",Example._tab1.selectOneWhenE2("3","-1").toObj());
	Example.print("select [id] = \"4\" and [id2] = \"21\" and [id3] = \"100\"",Example._tab1.selectOneWhenE3("4","21","100").toObj());
	Example.print("select [id] = \"4\" and [id2] = \"21\" and [id3] = \"-1\"",Example._tab1.selectOneWhenE3("4","21","-1").toObj());
	Example.print("select all [id2] = \"20\"",Example._tab1.selectAllWhenE("20",1).toOBJs());
	Example.print("select all [id2] = \"-1\"",Example._tab1.selectAllWhenE("-1",1).toOBJs());
};
Example.test_enhanced_csv_format = function() {
	Example.print("[enhanced] select all to rows",Example._tab2.selectAll().toROWs());
	Example.print("[enhanced] select all to objs",Example._tab2.selectAll().toOBJs());
	Example.print("[enhanced] select first row",Example._tab2.selectFirstRow().toRow());
	Example.print("[enhanced] select first obj",Example._tab2.selectFirstRow().toObj());
	Example.print("[enhanced] select last row",Example._tab2.selectLastRow().toRow());
	Example.print("[enhanced] select last obj",Example._tab2.selectLastRow().toObj());
	Example.print("[enhanced] select [id] = 2",Example._tab2.selectOneWhenE(2).toObj());
	Example.print("[enhanced] select [id] = -1",Example._tab2.selectOneWhenE(-1).toObj());
	Example.print("[enhanced] select [id] = 3 and [id2] = 20",Example._tab2.selectOneWhenE2(3,20).toObj());
	Example.print("[enhanced] select [id] = 3 and [id2] = -1",Example._tab2.selectOneWhenE2(3,-1).toObj());
	Example.print("[enhanced] select [id] = 4 and [id2] = 21 and [id3] = 100",Example._tab2.selectOneWhenE3(4,21,100).toObj());
	Example.print("[enhanced] select [id] = 4 and [id2] = 21 and [id3] = -1",Example._tab2.selectOneWhenE3(4,21,-1).toObj());
	Example.print("[enhanced] select all [id2] = 20",Example._tab2.selectAllWhenE(20,1).toOBJs());
	Example.print("[enhanced] select all [id2] = -1",Example._tab2.selectAllWhenE(-1,1).toOBJs());
};
var HxOverrides = function() { };
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
var Std = function() { };
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var acsv_Field = $hx_exports["acsv"]["Field"] = function() {
};
var acsv_Table = $hx_exports["acsv"]["Table"] = function() {
	this._indexed = { };
	this.body = [];
	this.head = [];
};
acsv_Table.Parse = function(content) {
	var table = acsv_Table.arrayToRows(acsv_Table.textToArray(content));
	table.content = content;
	return table;
};
acsv_Table.textToArray = function(text) {
	var array = [];
	var maxLen = text.length;
	var ptr = text;
	var ptrPos = 0;
	while(true) {
		var curLen = maxLen - ptrPos;
		var cellIndexA = 0;
		var cellIndexB = 0;
		var cells = [];
		var cell;
		var chr;
		while(cellIndexB < curLen) {
			cellIndexA = cellIndexB;
			chr = ptr.charAt(ptrPos + cellIndexB);
			if(chr == "\n" || chr == "\r\n") {
				++cellIndexB;
				break;
			}
			if(chr == "\r" && ptr.charAt(ptrPos + cellIndexB + 1) == "\n") {
				cellIndexB += 2;
				break;
			}
			if(chr == ",") {
				cell = "";
				var nextPos = ptrPos + cellIndexB + 1;
				if(nextPos >= maxLen) {
					chr = "\n";
				} else {
					chr = ptr.charAt(nextPos);
				}
				if(cellIndexA == 0 || chr == "," || chr == "\n" || chr == "\r\n") {
					++cellIndexB;
					cells.push("");
				} else if(chr == "\r" && ptr.charAt(ptrPos + cellIndexB + 2) == "\n") {
					cellIndexB += 2;
					cells.push("");
				} else {
					++cellIndexB;
				}
			} else if(chr == "\"") {
				++cellIndexB;
				while(true) {
					cellIndexB = ptr.indexOf("\"",ptrPos + cellIndexB);
					if(cellIndexB == -1) {
						throw new js__$Boot_HaxeError("Invalid Double Quote");
					}
					cellIndexB -= ptrPos;
					if(ptr.charAt(ptrPos + cellIndexB + 1) == "\"") {
						cellIndexB += 2;
						continue;
					}
					break;
				}
				cell = ptr.substring(ptrPos + cellIndexA + 1,ptrPos + cellIndexB);
				cell = StringTools.replace(cell,"\"\"","\"");
				cells.push(cell);
				++cellIndexB;
			} else {
				var indexA = ptr.indexOf(",",ptrPos + cellIndexB);
				if(indexA == -1) {
					indexA = curLen;
				} else {
					indexA -= ptrPos;
				}
				var indexB = ptr.indexOf("\r\n",ptrPos + cellIndexB);
				if(indexB == -1) {
					indexB = ptr.indexOf("\n",ptrPos + cellIndexB);
					if(indexB == -1) {
						indexB = curLen;
					} else {
						indexB -= ptrPos;
					}
				} else {
					indexB -= ptrPos;
				}
				cellIndexB = indexA;
				if(indexB < indexA) {
					cellIndexB = indexB;
				}
				cell = ptr.substring(ptrPos + cellIndexA,ptrPos + cellIndexB);
				cells.push(cell);
			}
		}
		array.push(cells);
		ptrPos += cellIndexB;
		if(ptrPos >= maxLen) {
			break;
		}
	}
	return array;
};
acsv_Table.arrayToRows = function(array) {
	var head = array.shift();
	var body = array;
	var fileds = [];
	var _g1 = 0;
	var _g = head.length;
	while(_g1 < _g) {
		var i = _g1++;
		var fullName = head[i];
		var parts = fullName.split(":");
		var filed = new acsv_Field();
		filed.fullName = fullName;
		filed.name = parts[0];
		filed.type = parts[1];
		fileds.push(filed);
	}
	var _g11 = 0;
	var _g2 = body.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var row = body[i1];
		var _g3 = 0;
		var _g21 = row.length;
		while(_g3 < _g21) {
			var j = _g3++;
			var type = fileds[j].type;
			var cell = row[j];
			var newVal = cell;
			var isEmptyCell = cell == null || cell == "";
			switch(type) {
			case "bool":
				if(isEmptyCell || cell == "false" || cell == "0") {
					newVal = false;
				} else {
					newVal = true;
				}
				break;
			case "int":
				if(isEmptyCell) {
					newVal = 0;
				} else {
					newVal = Std.parseInt(newVal);
				}
				break;
			case "json":
				if(isEmptyCell) {
					newVal = null;
				} else {
					newVal = cell;
				}
				break;
			case "number":
				if(isEmptyCell) {
					newVal = 0.0;
				} else {
					newVal = parseFloat(newVal);
				}
				break;
			case "strings":
				if(isEmptyCell) {
					newVal = "[]";
				} else {
					newVal = "[\"" + cell.split(",").join("\",\"") + "\"]";
				}
				break;
			}
			row[j] = newVal;
		}
		body[i1] = row;
	}
	var table = new acsv_Table();
	table.head = fileds;
	table.body = body;
	return table;
};
acsv_Table.prototype = {
	merge: function(b) {
		this.body = this.body.concat(b.body);
		var index = b.content.indexOf("\r\n");
		if(index == -1) {
			index = b.content.indexOf("\n");
		}
		var c = b.content.substring(index);
		this.content += c;
	}
	,createIndexAt: function(colIndex) {
		var map = { };
		var _g1 = 0;
		var _g = this.body.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.body[i];
			var key = row[colIndex];
			map[key] = row;
		}
		this._indexed[colIndex] = map;
	}
	,fmtRow: function(row) {
		var obj = [];
		var _g1 = 0;
		var _g = this.head.length;
		while(_g1 < _g) {
			var i = _g1++;
			var type = this.head[i].type;
			var val0 = row[i];
			var val1;
			if(type != null && type != "" && acsv_Table.JSON_TYPES.indexOf(type) != -1) {
				val1 = JSON.parse(val0);
			} else {
				val1 = val0;
			}
			obj.push(val1);
		}
		return obj;
	}
	,fmtObj: function(row) {
		var obj = { };
		var _g1 = 0;
		var _g = this.head.length;
		while(_g1 < _g) {
			var i = _g1++;
			var name = this.head[i].name;
			var type = this.head[i].type;
			var val0 = row[i];
			var val1;
			if(type != null && type != "" && acsv_Table.JSON_TYPES.indexOf(type) != -1) {
				val1 = JSON.parse(val0);
			} else {
				val1 = val0;
			}
			obj[name] = val1;
		}
		return obj;
	}
	,toRow: function() {
		if(this._selectd == null || this._selectd.length == 0) {
			return null;
		}
		return this.fmtRow(this._selectd[0]);
	}
	,toROWs: function() {
		if(this._selectd == null || this._selectd.length == 0) {
			return null;
		}
		var objs = [];
		var _g1 = 0;
		var _g = this._selectd.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this._selectd[i];
			objs.push(this.fmtRow(row));
		}
		return objs;
	}
	,toObj: function() {
		if(this._selectd == null || this._selectd.length == 0) {
			return null;
		}
		return this.fmtObj(this._selectd[0]);
	}
	,toOBJs: function() {
		if(this._selectd == null || this._selectd.length == 0) {
			return null;
		}
		var objs = [];
		var _g1 = 0;
		var _g = this._selectd.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this._selectd[i];
			objs.push(this.fmtObj(row));
		}
		return objs;
	}
	,selectAll: function() {
		this._selectd = this.body;
		return this;
	}
	,selectFirstRow: function() {
		this._selectd = [this.body[0]];
		return this;
	}
	,selectLastRow: function() {
		this._selectd = [this.body[this.body.length - 1]];
		return this;
	}
	,selectOneWhenE: function(value,colIndex) {
		if(colIndex == null) {
			colIndex = 0;
		}
		this._selectd = null;
		var map = this._indexed[colIndex];
		if(map != null) {
			this._selectd = [map[value]];
			return this;
		}
		var _g1 = 0;
		var _g = this.body.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.body[i];
			if(row[colIndex] == value) {
				this._selectd = [row];
				return this;
			}
		}
		return this;
	}
	,selectOneWhenE2: function(value1,value2,colIndex2,colIndex1) {
		if(colIndex1 == null) {
			colIndex1 = 0;
		}
		if(colIndex2 == null) {
			colIndex2 = 1;
		}
		return this.selectAllWhenE2(value1,value2,colIndex2,colIndex1,1);
	}
	,selectOneWhenE3: function(value1,value2,value3,colIndex3,colIndex2,colIndex1) {
		if(colIndex1 == null) {
			colIndex1 = 0;
		}
		if(colIndex2 == null) {
			colIndex2 = 1;
		}
		if(colIndex3 == null) {
			colIndex3 = 2;
		}
		return this.selectAllWhenE3(value1,value2,value3,colIndex3,colIndex2,colIndex1,1);
	}
	,selectAllWhenE: function(value,colIndex,limit) {
		if(limit == null) {
			limit = -1;
		}
		if(colIndex == null) {
			colIndex = 0;
		}
		var rows = [];
		var _g1 = 0;
		var _g = this.body.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.body[i];
			if(row[colIndex] == value) {
				rows.push(row);
				--limit;
				if(limit == 0) {
					break;
				}
			}
		}
		this._selectd = rows;
		return this;
	}
	,selectAllWhenE2: function(value1,value2,colIndex2,colIndex1,limit) {
		if(limit == null) {
			limit = -1;
		}
		if(colIndex1 == null) {
			colIndex1 = 0;
		}
		if(colIndex2 == null) {
			colIndex2 = 1;
		}
		var rows = [];
		var _g1 = 0;
		var _g = this.body.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.body[i];
			if(row[colIndex1] == value1 && row[colIndex2] == value2) {
				rows.push(row);
				--limit;
				if(limit == 0) {
					break;
				}
			}
		}
		this._selectd = rows;
		return this;
	}
	,selectAllWhenE3: function(value1,value2,value3,colIndex3,colIndex2,colIndex1,limit) {
		if(limit == null) {
			limit = -1;
		}
		if(colIndex1 == null) {
			colIndex1 = 0;
		}
		if(colIndex2 == null) {
			colIndex2 = 1;
		}
		if(colIndex3 == null) {
			colIndex3 = 2;
		}
		var rows = [];
		var _g1 = 0;
		var _g = this.body.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.body[i];
			if(row[colIndex1] == value1 && row[colIndex2] == value2 && row[colIndex3] == value3) {
				rows.push(row);
				--limit;
				if(limit == 0) {
					break;
				}
			}
		}
		this._selectd = rows;
		return this;
	}
	,selectAllWhenG: function(value,colIndex) {
		if(colIndex == null) {
			colIndex = 0;
		}
		var rows = [];
		var _g1 = 0;
		var _g = this.body.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.body[i];
			if(row[colIndex] > value) {
				rows.push(row);
			}
		}
		this._selectd = rows;
		return this;
	}
	,selectAllWhenGE: function(value,colIndex) {
		if(colIndex == null) {
			colIndex = 0;
		}
		var rows = [];
		var _g1 = 0;
		var _g = this.body.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.body[i];
			if(row[colIndex] >= value) {
				rows.push(row);
			}
		}
		this._selectd = rows;
		return this;
	}
	,selectAllWhenL: function(value,colIndex) {
		if(colIndex == null) {
			colIndex = 0;
		}
		var rows = [];
		var _g1 = 0;
		var _g = this.body.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.body[i];
			if(row[colIndex] < value) {
				rows.push(row);
			}
		}
		this._selectd = rows;
		return this;
	}
	,selectAllWhenLE: function(value,colIndex) {
		if(colIndex == null) {
			colIndex = 0;
		}
		var rows = [];
		var _g1 = 0;
		var _g = this.body.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.body[i];
			if(row[colIndex] <= value) {
				rows.push(row);
			}
		}
		this._selectd = rows;
		return this;
	}
	,selectRowWhenNear: function(value,nearType,colIndex) {
		if(colIndex == null) {
			colIndex = 0;
		}
		this._selectd = null;
		var rowIndex = 0;
		var cellVal;
		var _g1 = 0;
		var _g = this.body.length;
		while(_g1 < _g) {
			var i = _g1++;
			var row = this.body[i];
			rowIndex = i;
			cellVal = row[colIndex];
			var isNear = false;
			if(value < 0) {
				if(nearType == 0) {
					isNear = value == cellVal;
				} else if(nearType == 1) {
					isNear = value < cellVal;
				} else if(nearType == 2) {
					isNear = value <= cellVal;
				} else if(nearType == 3) {
					isNear = value > cellVal;
				} else if(nearType == 2) {
					isNear = value >= cellVal;
				}
				if(isNear) {
					break;
				}
			} else {
				if(nearType == 0) {
					isNear = value == cellVal;
				} else if(nearType == 1) {
					isNear = value > cellVal;
				} else if(nearType == 2) {
					isNear = value >= cellVal;
				} else if(nearType == 3) {
					isNear = value < cellVal;
				} else if(nearType == 2) {
					isNear = value <= cellVal;
				}
				if(isNear) {
					break;
				}
			}
		}
		this._selectd = this.body[rowIndex];
		return this;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
Example.standard_format_text = "id,id2,id3,name,brief\r\n1,20,100,John,He is a googd man\r\n2,20,200,张三,\"他是一个好人\r\n我们都喜欢他\"\r\n3,20,300,море,\"Он хороший человек\r\nмы все любим его\r\nЕго девиз:\r\n\"\"доверяй себе\"\"\"\r\n4,21,100,الشمس,صباح الخير\r\n5,21,200,चंद्रमा,\r\n6,21,300,,सुसंध्या\r\n7,22,100,,อยากเป็นซุปตาร์\r\n8,22,200,ดาว,";
Example.enhanced_format_text = "id:int,id2:int,id3:int,name:string,weight:number,marry:bool,education:json,tags:strings,brief\r\n1,20,100,John,120.1,true,\"[\"\"MSU\"\"]\",\"good,cool\",He is a googd man\r\n2,20,200,张三,121.2,false,\"[\"\"JHU\"\",\"\"MIT\"\"]\",good,\"他是一个好人\r\n我们都喜欢他\"\r\n3,20,300,море,123.4,true,\"[\"\"BC\"\",\"\"HYP\"\",\"\"NYU\"\"]\",strong,\"Он хороший человек\r\nмы все любим его\r\nЕго девиз:\r\n\"\"доверяй себе\"\"\"\r\n4,21,100,الشمس,124.5,false,\"{\"\"USC\"\":12}\",\"strong,cool\",صباح الخير\r\n5,21,200,चंद्रमा,126.7,1,\"{\"\"UCHI\"\":34,\"\"UCB\"\":56}\",\"height,strong\",\r\n6,21,300,,127.8,0,\"{\"\"UCHI\"\":78,\"\"UCB\"\":[90,12]}\",\"thin,good\",सुसंध्या\r\n7,22,100,,128.9,1,\"[\"\"VT\"\",{\"\"UCSD\"\":34}]\",,อยากเป็นซุปตาร์\r\n8,22,200,ดาว,129.01,0,,\"hot,thin,good\",";
acsv_Table.JSON_TYPES = ["json","strings"];
acsv_Table.CompareTypeEqual = 0;
acsv_Table.CompareTypeGreater = 1;
acsv_Table.CompareTypeGreaterOrEqual = 2;
acsv_Table.CompareTypeLess = 3;
acsv_Table.CompareTypeLessOrEqual = 4;
Example.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
