<haxe>
	<class path="Array" params="T" file="C:\HaxeToolkit\haxe\std/python/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" get="inline" set="null" line="36">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<copy public="1" get="inline" set="null" line="41">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="45">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<insert public="1" get="inline" set="null" line="49">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<join public="1" get="inline" set="null" line="54">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<toString public="1" get="inline" set="null" line="58">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<pop public="1" get="inline" set="null" line="62">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" get="inline" set="null" line="66">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<unshift public="1" get="inline" set="null" line="70">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<indexOf public="1" get="inline" set="null" line="74">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="78">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<remove public="1" get="inline" set="null" line="82">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<reverse public="1" get="inline" set="null" line="87">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" get="inline" set="null" line="91">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" get="inline" set="null" line="95">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" get="inline" set="null" line="99">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" get="inline" set="null" line="103">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is 
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<map public="1" params="S" get="inline" set="null" line="107">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="111">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<_get get="inline" set="null" line="115">
			<f a="idx">
				<x path="Int"/>
				<c path="Array.T"/>
			</f>
			<meta><m n=":keep"/></meta>
		</_get>
		<_set get="inline" set="null" line="120">
			<f a="idx:val">
				<x path="Int"/>
				<c path="Array.T"/>
				<c path="Array.T"/>
			</f>
			<meta><m n=":keep"/></meta>
		</_set>
		<unsafeGet get="inline" set="null" line="125">
			<f a="idx">
				<x path="Int"/>
				<c path="Array.T"/>
			</f>
			<meta><m n=":keep"/></meta>
		</unsafeGet>
		<unsafeSet get="inline" set="null" line="130">
			<f a="idx:val">
				<x path="Int"/>
				<c path="Array.T"/>
				<c path="Array.T"/>
			</f>
			<meta><m n=":keep"/></meta>
		</unsafeSet>
		<__iter__ set="method">
			<f a=""><x path="python.NativeIterator"><c path="Array.T"/></x></f>
			<meta><m n=":noCompletion"/></meta>
		</__iter__>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"list"</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="C:\HaxeToolkit\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="python.lib.datetime.Datetime" params="" file="C:\HaxeToolkit\haxe\std/python/lib/datetime/Datetime.hx" extern="1">
		<min public="1" static="1"><c path="python.lib.datetime.Datetime"/></min>
		<max public="1" static="1"><c path="python.lib.datetime.Datetime"/></max>
		<resolution public="1" static="1"><c path="python.lib.datetime.Timedelta"/></resolution>
		<today public="1" set="method" static="1"><f a=""><c path="python.lib.datetime.Datetime"/></f></today>
		<now public="1" set="method" static="1"><f a="?tzinfo">
	<c path="python.lib.datetime.Tzinfo"/>
	<c path="python.lib.datetime.Datetime"/>
</f></now>
		<utcnow public="1" set="method" static="1"><f a=""><c path="python.lib.datetime.Datetime"/></f></utcnow>
		<fromtimestamp public="1" set="method" static="1">
			<f a="timestamp:?tzInfo" v=":null">
				<x path="Float"/>
				<c path="python.lib.datetime.Tzinfo"/>
				<c path="python.lib.datetime.Datetime"/>
			</f>
			<meta><m n=":value"><e>{ tzInfo : null }</e></m></meta>
		</fromtimestamp>
		<utcfromtimestamp public="1" set="method" static="1"><f a="timestamp">
	<x path="Int"/>
	<c path="python.lib.datetime.Datetime"/>
</f></utcfromtimestamp>
		<fromordinal public="1" set="method" static="1"><f a="ordinal">
	<x path="Int"/>
	<c path="python.lib.datetime.Datetime"/>
</f></fromordinal>
		<year public="1"><x path="Int"/></year>
		<month public="1"><x path="Int"/></month>
		<day public="1"><x path="Int"/></day>
		<hour public="1"><x path="Int"/></hour>
		<minute public="1"><x path="Int"/></minute>
		<second public="1"><x path="Int"/></second>
		<microsecond public="1"><x path="Int"/></microsecond>
		<tzinfo public="1"><c path="python.lib.datetime.Tzinfo"/></tzinfo>
		<timetuple public="1" set="method"><f a=""><c path="python.lib.time.StructTime"/></f></timetuple>
		<strftime public="1" set="method"><f a="format">
	<c path="String"/>
	<c path="String"/>
</f></strftime>
		<replace public="1" set="method">
			<f a="?year:?month:?day:?hour:?minute:?second:?microsecond:?tzinfo" v="1970:1:1:0:0:::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="python.lib.datetime.Tzinfo"/>
				<c path="python.lib.datetime.Datetime"/>
			</f>
			<meta><m n=":value"><e>{ minute : 0, hour : 0, day : 1, month : 1, year : 1970 }</e></m></meta>
		</replace>
		<weekday public="1" set="method"><f a=""><x path="Int"/></f></weekday>
		<isoweekday public="1" set="method"><f a=""><x path="Int"/></f></isoweekday>
		<timestamp public="1" set="method"><f a=""><x path="Float"/></f></timestamp>
		<new public="1" set="method">
			<f a="year:month:day:?hour:?minute:?second:?microsecond:?tzinfo" v=":::0:0:0:0:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="python.lib.datetime.Tzinfo"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tzinfo : null, microsecond : 0, second : 0, minute : 0, hour : 0 }</e></m></meta>
		</new>
		<meta><m n=":pythonImport">
	<e>"datetime"</e>
	<e>"datetime"</e>
</m></meta>
	</class>
	<class path="python.lib.datetime.Tzinfo" params="" file="C:\HaxeToolkit\haxe\std/python/lib/datetime/Tzinfo.hx" extern="1"><meta><m n=":pythonImport">
	<e>"datetime"</e>
	<e>"tzinfo"</e>
</m></meta></class>
	<class path="python.lib.datetime.Timezone" params="" file="C:\HaxeToolkit\haxe\std/python/lib/datetime/Timezone.hx" extern="1">
		<extends path="python.lib.datetime.Tzinfo"/>
		<utc public="1" set="null" static="1"><c path="python.lib.datetime.Tzinfo"/></utc>
		<meta><m n=":pythonImport">
	<e>"datetime"</e>
	<e>"timezone"</e>
</m></meta>
	</class>
	<abstract path="Enum" params="T" file="C:\HaxeToolkit\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="python.internal.UBuiltins" params="" file="C:\HaxeToolkit\haxe\std/python/internal/UBuiltins.hx" extern="1">
		<len public="1" set="method" static="1"><f a="x">
	<d/>
	<x path="Int"/>
</f></len>
		<isinstance public="1" set="method" static="1"><f a="o:c">
	<d/>
	<d/>
	<x path="Bool"/>
</f></isinstance>
		<str public="1" set="method" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></str>
		<bool public="1" set="method" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></bool>
		<float public="1" set="method" static="1"><f a="o">
	<d/>
	<x path="Float"/>
</f></float>
		<int public="1" set="method" static="1"><f a="o:?base">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></int>
		<list public="1" params="T" set="method" static="1"><f a="o">
	<d/>
	<c path="Array"><c path="list.T"/></c>
</f></list>
		<min public="1" params="T" set="method" static="1"><f a="a:b">
	<c path="min.T"/>
	<c path="min.T"/>
	<c path="min.T"/>
</f></min>
		<max public="1" params="T" set="method" static="1"><f a="a:b">
	<c path="max.T"/>
	<c path="max.T"/>
	<c path="max.T"/>
</f></max>
		<hasattr public="1" set="method" static="1"><f a="o:a">
	<d/>
	<c path="String"/>
	<x path="Bool"/>
</f></hasattr>
		<getattr public="1" set="method" static="1"><f a="o:a:?def">
	<d/>
	<c path="String"/>
	<d/>
	<d/>
</f></getattr>
		<setattr public="1" set="method" static="1"><f a="o:a:v">
	<d/>
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></setattr>
		<delattr public="1" set="method" static="1"><f a="o:attr">
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></delattr>
		<callable public="1" set="method" static="1"><f a="x">
	<d/>
	<x path="Bool"/>
</f></callable>
		<type public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></type>
		<ord public="1" set="method" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></ord>
		<chr public="1" set="method" static="1"><f a="c">
	<x path="Int"/>
	<c path="String"/>
</f></chr>
		<map public="1" params="T:S" set="method" static="1"><f a="f:a">
	<f a="">
		<c path="map.T"/>
		<c path="map.S"/>
	</f>
	<c path="Array"><c path="map.T"/></c>
	<c path="Array"><c path="map.S"/></c>
</f></map>
		<filter public="1" params="T" set="method" static="1"><f a="f:a">
	<f a="">
		<c path="filter.T"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="filter.T"/></c>
	<c path="Array"><c path="filter.T"/></c>
</f></filter>
		<iter public="1" params="T" set="method" static="1"><f a="o">
	<x path="python.NativeIterable"><c path="iter.T"/></x>
	<x path="python.NativeIterator"><c path="iter.T"/></x>
</f></iter>
		<haxe_doc>This class provides unqualified access to python builtins that are safe to use in haxe/python code.
    Fields listed here must be synchronized with genpy's KeywordHandler.kwds2 list to be properly escaped.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="python.lib.Math" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Math.hx" extern="1">
		<isnan public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Bool"/>
</f></isnan>
		<pi public="1" static="1"><x path="Float"/></pi>
		<sqrt public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<log public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></log>
		<cos public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<sin public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<tan public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<atan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":pythonImport"><e>"math"</e></m>
		</meta>
	</class>
	<class path="Math" params="" file="C:\HaxeToolkit\haxe\std/python/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with `NaN` on Windows,
		see <https://bugs.php.net/bug.php?id=42143>]]></haxe_doc>
		</NaN>
		<abs public="1" get="inline" set="null" line="36" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" get="inline" set="null" line="41" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" get="inline" set="null" line="45" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" get="inline" set="null" line="50" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" get="inline" set="null" line="54" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" get="inline" set="null" line="74" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" get="inline" set="null" line="85" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" get="inline" set="null" line="91" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" get="inline" set="null" line="96" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" get="inline" set="null" line="104" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" get="inline" set="null" line="108" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="114" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="121" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" get="inline" set="null" line="127" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" get="inline" set="null" line="129" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":pythonImport"><e>"math"</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Reflect" params="" file="C:\HaxeToolkit\haxe\std/python/_std/Reflect.hx">
		<field public="1" set="method" line="43" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read"</e>
	<e>"anon_optional_read"</e>
</m></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<getProperty public="1" set="method" line="52" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="65" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":access"><e>python.Boot</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="C:\HaxeToolkit\haxe\std/python/_std/Std.hx">
		<string public="1" set="method" line="132" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":access"><e>python.Boot</e></m></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<parseInt public="1" set="method" line="146" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is `null`.</haxe_doc>
		</parseInt>
		<shortenPossibleNumber set="method" line="175" static="1"><f a="x">
	<c path="String"/>
	<c path="String"/>
</f></shortenPossibleNumber>
		<parseFloat public="1" set="method" line="198" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accept or can return a `null` value, or for the Flash compiler and AS3
	generator to distinguish between base values that can be `null` and others that
	can't.

	@see https://haxe.org/manual/types-nullability.html</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="C:\HaxeToolkit\haxe\std/python/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="73" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" get="inline" set="null" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="36">
			<f a=""><c path="String"/></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="40">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="45">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="50">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="54">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="58">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="62">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="67">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" get="inline" set="null" line="71">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.
	
	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":native"><e>"str"</e></m>
		</meta>
	</class>
	<class path="StringTools" params="" file="C:\HaxeToolkit\haxe\std/StringTools.hx">
		<replace public="1" set="method" line="374" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurrences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s`. If `by` is also the empty String `""`, `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="acsv.Field" params="" file="src/haxe/acsv/Field.hx">
		<fullName public="1">
			<c path="String"/>
			<haxe_doc>* Full Name.</haxe_doc>
		</fullName>
		<name public="1">
			<c path="String"/>
			<haxe_doc>* Name.</haxe_doc>
		</name>
		<type public="1">
			<c path="String"/>
			<haxe_doc>* Type.</haxe_doc>
		</type>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
			<haxe_doc>* Constructor.</haxe_doc>
		</new>
		<haxe_doc>* 1. Copyright (c) 2022 amin2312
 * 2. Version 1.0.0
 * 3. MIT License
 *
 * CSV head field.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="acsv.Table" params="" file="src/haxe/acsv/Table.hx">
		<JSON_TYPES line="16" static="1">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>* Supported json field types.</haxe_doc>
		</JSON_TYPES>
		<Parse public="1" set="method" line="641" static="1">
			<f a="content:?filedSeparator:?filedMultiLineDelimiter">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="acsv.Table"/>
			</f>
			<haxe_doc>* Parse csv conent.
     * @param content As name mean
     * @param filedSeparator filed separator
     * @param filedMultiLineDelimiter filed multi-line delimiter</haxe_doc>
		</Parse>
		<textToArray set="method" line="650" static="1">
			<f a="text:?FS:?FML">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="Array"><c path="Array"><d/></c></c>
			</f>
			<haxe_doc>* Convert text to array.</haxe_doc>
		</textToArray>
		<arrayToRows set="method" line="786" static="1">
			<f a="array">
				<c path="Array"><c path="Array"><d/></c></c>
				<c path="acsv.Table"/>
			</f>
			<haxe_doc>* Convert array to rows.</haxe_doc>
		</arrayToRows>
		<content public="1">
			<c path="String"/>
			<haxe_doc>* The raw content.</haxe_doc>
		</content>
		<head public="1">
			<c path="Array"><c path="acsv.Field"/></c>
			<haxe_doc>* Parsed csv table Head.</haxe_doc>
		</head>
		<body public="1">
			<c path="Array"><c path="Array"><d/></c></c>
			<haxe_doc>* Parsed csv table Body.</haxe_doc>
		</body>
		<_indexSet>
			<d/>
			<haxe_doc>* Index Set(optimize for read).</haxe_doc>
		</_indexSet>
		<_selected>
			<c path="Array"><c path="Array"><d/></c></c>
			<haxe_doc>* Selected data(for Method Chaining).</haxe_doc>
		</_selected>
		<merge public="1" set="method" line="48">
			<f a="b">
				<c path="acsv.Table"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Merge a table.
	 * <br/><b>Notice:</b> two tables' structure must be same.
	 * @param b source table]]></haxe_doc>
		</merge>
		<createIndexAt public="1" set="method" line="65">
			<f a="colIndex">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Create index for the specified column.
	 * <br>This function is only valid for "selectWhenE" and "limit" param is 1.
	 * <br>It will improve performance.
	 * @param colIndex column index]]></haxe_doc>
		</createIndexAt>
		<getColIndexBy public="1" set="method" line="88">
			<f a="name">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get column index by specified field name.
	 * @param name As name mean</haxe_doc>
		</getColIndexBy>
		<sortBy public="1" set="method" line="106">
			<f a="colIndex:sortType">
				<x path="Int"/>
				<x path="Int"/>
				<c path="acsv.Table"/>
			</f>
			<haxe_doc>* Sort by selected rows.
     * @param colIndex the column index specified for sorting
     * @param sortType 0: asc, 1: desc
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.</haxe_doc>
		</sortBy>
		<getCurrentSelector public="1" set="method" line="138">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc><![CDATA[* Get current selector(it includes all selected results).
	 * <br><b>Notice:</b> It be assigned after call "select..." function]]></haxe_doc>
		</getCurrentSelector>
		<fmtRow set="method" line="145">
			<f a="row">
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>* Format data to row.</haxe_doc>
		</fmtRow>
		<fmtObj set="method" line="171">
			<f a="row">
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>* Format data to obj.</haxe_doc>
		</fmtObj>
		<toFirstRow public="1" set="method" line="202">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>* Fetch first selected result to a row and return it.</haxe_doc>
		</toFirstRow>
		<toLastRow public="1" set="method" line="215">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>* Fetch last selected result to a row and return it.</haxe_doc>
		</toLastRow>
		<toRows public="1" set="method" line="228">
			<f a=""><c path="Array"><c path="Array"><d/></c></c></f>
			<haxe_doc>* Fetch all selected results to the rows and return it.</haxe_doc>
		</toRows>
		<toFirstObj public="1" set="method" line="246">
			<f a=""><d/></f>
			<haxe_doc>* Fetch first selected result to a object and return it.</haxe_doc>
		</toFirstObj>
		<toLastObj public="1" set="method" line="259">
			<f a=""><d/></f>
			<haxe_doc>* Fetch last selected result to a object and return it.</haxe_doc>
		</toLastObj>
		<toObjs public="1" set="method" line="272">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>* Fetch all selected results to the objects and return it.</haxe_doc>
		</toObjs>
		<toTable public="1" set="method" line="290">
			<f a=""><c path="acsv.Table"/></f>
			<haxe_doc>* Fetch all selected results to a new table.</haxe_doc>
		</toTable>
		<selectAll public="1" set="method" line="306">
			<f a=""><c path="acsv.Table"/></f>
			<haxe_doc>* Select all rows.
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.</haxe_doc>
		</selectAll>
		<selectFirstRow public="1" set="method" line="315">
			<f a=""><c path="acsv.Table"/></f>
			<haxe_doc>* Select the first row.
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.</haxe_doc>
		</selectFirstRow>
		<selectLastRow public="1" set="method" line="324">
			<f a=""><c path="acsv.Table"/></f>
			<haxe_doc>* Select the last row.
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.</haxe_doc>
		</selectLastRow>
		<selectAt public="1" set="method" line="334">
			<f a="rowIndices">
				<c path="Array"><x path="Int"/></c>
				<c path="acsv.Table"/>
			</f>
			<haxe_doc><![CDATA[* Selects the specified <b>rows</b> by indices.
     * @param rowIndices specified row's indices
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.]]></haxe_doc>
		</selectAt>
		<selectWhenIn public="1" set="method" line="355">
			<f a="limit:values:?colIndex">
				<x path="Int"/>
				<c path="Array"><d/></c>
				<x path="Int"/>
				<c path="acsv.Table"/>
			</f>
			<haxe_doc>* Select the rows when the column's value is equal to any value of array.
     * @param limit maximum length of every selected results (0 is infinite, if you only need 1 result, 1 is recommended, it will improve performance)
     * @param values the array of values
     * @param colIndex specified column index
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.</haxe_doc>
		</selectWhenIn>
		<selectWhenE public="1" set="method" line="375">
			<f a="limit:value:?colIndex:?extraSelector">
				<x path="Int"/>
				<d/>
				<x path="Int"/>
				<c path="Array"><c path="Array"><d/></c></c>
				<c path="acsv.Table"/>
			</f>
			<haxe_doc>* Select the rows when the column's value is equal to specified value.
     * @param limit maximum length of selected results (0 is infinite, if you only need 1 result, 1 is recommended, it will improve performance)
     * @param value the specified value
     * @param colIndex specified column index
     * @param extraSelector extra selector, use it to save selected result
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.</haxe_doc>
		</selectWhenE>
		<selectWhenE2 public="1" set="method" line="436">
			<f a="limit:value1:value2:?colIndex2:?colIndex1">
				<x path="Int"/>
				<d/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="acsv.Table"/>
			</f>
			<haxe_doc>* Select the rows when the column's values are equal to specified values.
     * @param limit maximum length of selected results (0 is infinite, if you only need 1 result, 1 is recommended, it will improve performance)
     * @param value1 first specified value
     * @param value2 second specified value
     * @param colIndex2 second specified column index
     * @param colIndex1 first specified column index
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.</haxe_doc>
		</selectWhenE2>
		<selectWhenE3 public="1" set="method" line="471">
			<f a="limit:value1:value2:value3:?colIndex3:?colIndex2:?colIndex1">
				<x path="Int"/>
				<d/>
				<d/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="acsv.Table"/>
			</f>
			<haxe_doc>* Select the rows when the column's values are equal to specified values.
     * @param limit maximum length of selected results (0 is infinite, if you only need 1 result, 1 is recommended, it will improve performance)
     * @param value1 first specified value
     * @param value2 second specified value
     * @param value3 third specified value
     * @param colIndex3 third specified column index
     * @param colIndex2 second specified column index
     * @param colIndex1 first specified column index
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.</haxe_doc>
		</selectWhenE3>
		<selectWhenG public="1" set="method" line="503">
			<f a="limit:withEqu:value:?colIndex">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="acsv.Table"/>
			</f>
			<haxe_doc>* Select the rows when the column's value is greater than specified value.
     * @param limit maximum length of selected results (0 is infinite, if you only need 1 result, 1 is recommended, it will improve performance)
     * @param withEqu whether include equation
     * @param value the specified value
     * @param colIndex specified column index
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.</haxe_doc>
		</selectWhenG>
		<selectWhenL public="1" set="method" line="536">
			<f a="limit:withEqu:value:?colIndex">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="acsv.Table"/>
			</f>
			<haxe_doc>* Select the rows when the column's value is less than specified values.
     * @param limit maximum length of selected results (0 is infinite, if you only need 1 result, 1 is recommended, it will improve performance)
     * @param withEqu whether include equation
     * @param value the specified value
     * @param colIndex specified column index
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.</haxe_doc>
		</selectWhenL>
		<selectWhenGreaterAndLess public="1" set="method" line="571">
			<f a="limit:GWithEqu:LWithEqu:GValue:LValue:?colIndex">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="acsv.Table"/>
			</f>
			<haxe_doc><![CDATA[* Select the rows when the column's value is greater than specified value <b>and</b> less than specified value.
     * @param limit maximum length of selected results (0 is infinite, if you only need 1 result, 1 is recommended, it will improve performance)
     * @param GWithEqu whether greater and equal
     * @param LWithEqu whether less and equal
     * @param GValue the specified greater value
     * @param LValue the specified less value
     * @param colIndex specified column index
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.]]></haxe_doc>
		</selectWhenGreaterAndLess>
		<selectWhenLessOrGreater public="1" set="method" line="608">
			<f a="limit:LWithEqu:GWithEqu:LValue:GValue:?colIndex">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="acsv.Table"/>
			</f>
			<haxe_doc><![CDATA[* Select the rows when the column's value is less than specified value <b>or</b> greater than specified value.
     * @param limit maximum length of selected results (0 is infinite, if you only need 1 result, 1 is recommended, it will improve performance)
     * @param LWithEqu whether less and equal
     * @param GWithEqu whether greater and equal
     * @param LValue the specified less value
     * @param GValue the specified greater value
     * @param colIndex specified column index
     * @return THIS instance (for Method Chaining), can call "to..." or "select..." function in next step.]]></haxe_doc>
		</selectWhenLessOrGreater>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
			<haxe_doc>* Constructor.</haxe_doc>
		</new>
		<haxe_doc>* 1. Copyright (c) 2022 amin2312
 * 2. Version 1.0.0
 * 3. MIT License
 *
 * ACsv is a easy, fast and powerful csv parse library.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":expose"/>
		</meta>
	</class>
	<abstract path="haxe.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which
		* is public and
		* unifies with the type used for type parameter `T`.

	If a type parameter A is assigned to a type parameter B which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="50" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="63" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="96" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="108" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an 
  [extension](https://haxe.org/manual/lf-static-extension.html) to the 
  `enum` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="132" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="143" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="157" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="169" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<match public="1" set="method" static="1">
			<f a="e:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an 
  [extension](https://haxe.org/manual/lf-static-extension.html) to the 
  `EnumValue` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="C:\HaxeToolkit\haxe\std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.
	
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.Rest" params="T" file="C:\HaxeToolkit\haxe\std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<class path="python.Set" params="T" file="C:\HaxeToolkit\haxe\std/python/Set.hx" extern="1">
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length get="inline" set="null" line="36"><f a=""><x path="Int"/></f></get_length>
		<has public="1" get="inline" set="null" line="40"><f a="v">
	<c path="python.Set.T"/>
	<x path="Bool"/>
</f></has>
		<isdisjoint public="1" set="method"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="Bool"/>
</f></isdisjoint>
		<issubset public="1" set="method"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="Bool"/>
</f></issubset>
		<issubset_proper public="1" get="inline" set="null" line="46"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="Bool"/>
</f></issubset_proper>
		<issuperset public="1" set="method"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="Bool"/>
</f></issuperset>
		<issuperset_proper public="1" get="inline" set="null" line="50"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="Bool"/>
</f></issuperset_proper>
		<union public="1" set="method"><f a="other:others">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="haxe.extern.Rest"><c path="python.Set"><c path="python.Set.T"/></c></x>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></union>
		<intersection public="1" set="method"><f a="other:others">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="haxe.extern.Rest"><c path="python.Set"><c path="python.Set.T"/></c></x>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></intersection>
		<difference public="1" set="method"><f a="other:others">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="haxe.extern.Rest"><c path="python.Set"><c path="python.Set.T"/></c></x>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></difference>
		<symmetric_difference public="1" set="method"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></symmetric_difference>
		<copy public="1" set="method"><f a=""><c path="python.Set"><c path="python.Set.T"/></c></f></copy>
		<update public="1" set="method"><f a="other:others">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="haxe.extern.Rest"><c path="python.Set"><c path="python.Set.T"/></c></x>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></update>
		<intersection_update public="1" set="method"><f a="other:others">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="haxe.extern.Rest"><c path="python.Set"><c path="python.Set.T"/></c></x>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></intersection_update>
		<difference_update public="1" set="method"><f a="other:others">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="haxe.extern.Rest"><c path="python.Set"><c path="python.Set.T"/></c></x>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></difference_update>
		<symmetric_difference_update public="1" set="method"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></symmetric_difference_update>
		<add public="1" set="method"><f a="elem">
	<c path="python.Set.T"/>
	<x path="Void"/>
</f></add>
		<remove public="1" set="method"><f a="elem">
	<c path="python.Set.T"/>
	<x path="Void"/>
</f></remove>
		<discard public="1" set="method"><f a="elem">
	<c path="python.Set.T"/>
	<x path="Void"/>
</f></discard>
		<pop public="1" set="method"><f a=""><c path="python.Set.T"/></f></pop>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<iter public="1" get="inline" set="null" line="70"><f a=""><x path="python.NativeIterator"><c path="python.Set.T"/></x></f></iter>
		<iterator public="1" get="inline" set="null" line="74"><f a=""><t path="Iterator"><c path="python.Set.T"/></t></f></iterator>
		<__iter__ set="method"><f a=""><x path="python.NativeIterator"><c path="python.Set.T"/></x></f></__iter__>
		<new public="1" set="method">
			<f a="?iterable">
				<x path="python.NativeIterable"><c path="python.Set.T"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?array">
	<c path="Array"><c path="python.Set.T"/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"set"</e></m>
		</meta>
	</class>
	<class path="python.Boot" params="" file="C:\HaxeToolkit\haxe\std/python/Boot.hx">
		<keywords line="39" static="1"><c path="python.Set"><c path="String"/></c></keywords>
		<toString1 set="method" line="92" static="1">
			<f a="o:s">
				<d/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</toString1>
		<fields set="method" line="244" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":analyzer"><e>no_local_dce</e></m>
			</meta>
		</fields>
		<simpleField set="method" line="280" static="1"><f a="o:field">
	<d/>
	<c path="String"/>
	<d/>
</f></simpleField>
		<field set="method" line="287" static="1"><f a="o:field">
	<d/>
	<c path="String"/>
	<d/>
</f></field>
		<getInstanceFields set="method" line="330" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getInstanceFields>
		<getSuperClass set="method" line="355" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getSuperClass>
		<getClassFields set="method" line="371" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getClassFields>
		<prefixLength line="395" static="1"><x path="Int"/></prefixLength>
		<unhandleKeywords set="method" line="397" static="1"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></unhandleKeywords>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="python.Bytearray" params="" file="C:\HaxeToolkit\haxe\std/python/Bytearray.hx" extern="1">
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length public="1" get="inline" set="null" line="36"><f a=""><x path="Int"/></f></get_length>
		<get public="1" get="inline" set="null" line="40"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="44"><f a="i:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<__setitem__ public="1" set="method"><f a="i:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></__setitem__>
		<decode public="1" set="method">
			<f a="?encoding:?errors" v="&quot;utf-8&quot;:&quot;strict&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ errors : "strict", encoding : "utf-8" }</e></m></meta>
		</decode>
		<new public="1" set="method">
			<f a="source:encoding:?errors">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="it">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="it">
	<x path="python.NativeIterable"><x path="Int"/></x>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="size">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"bytearray"</e></m></meta>
	</class>
	<class path="python.Bytes" params="" file="C:\HaxeToolkit\haxe\std/python/Bytes.hx" extern="1">
		<extends path="python.Bytearray"/>
		<meta><m n=":native"><e>"bytes"</e></m></meta>
	</class>
	<class path="python.Dict" params="K:V" file="C:\HaxeToolkit\haxe\std/python/Dict.hx" extern="1">
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length get="inline" set="null" line="34"><f a=""><x path="Int"/></f></get_length>
		<get public="1" set="method"><f a="key:?def">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
	<c path="python.Dict.V"/>
</f></get>
		<getSafe public="1" get="inline" set="null" line="40"><f a="key">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
</f></getSafe>
		<set public="1" get="inline" set="null" line="44"><f a="key:val">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
	<x path="Void"/>
</f></set>
		<remove public="1" get="inline" set="null" line="48"><f a="key">
	<c path="python.Dict.K"/>
	<x path="Void"/>
</f></remove>
		<hasKey public="1" get="inline" set="null" line="52"><f a="k">
	<c path="python.Dict.K"/>
	<x path="Bool"/>
</f></hasKey>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<copy public="1" set="method"><f a=""><c path="python.Dict">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
</c></f></copy>
		<items public="1" set="method"><f a=""><c path="python.DictView"><c path="python.Tuple2">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
</c></c></f></items>
		<keys public="1" set="method"><f a=""><c path="python.DictView"><c path="python.Dict.K"/></c></f></keys>
		<pop public="1" set="method"><f a="key:?def">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
	<c path="python.Dict.V"/>
</f></pop>
		<popitem public="1" set="method"><f a=""><c path="python.Tuple2">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
</c></f></popitem>
		<setdefault public="1" set="method"><f a="key:?def">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
	<c path="python.Dict.V"/>
</f></setdefault>
		<update public="1" set="method"><f a="d">
	<c path="python.Dict">
		<c path="python.Dict.K"/>
		<c path="python.Dict.V"/>
	</c>
	<x path="Void"/>
</f></update>
		<values public="1" set="method"><f a=""><c path="python.DictView"><c path="python.Dict.V"/></c></f></values>
		<iter public="1" get="inline" set="null" line="66"><f a=""><x path="python.NativeIterator"><c path="python.Dict.K"/></x></f></iter>
		<iterator public="1" get="inline" set="null" line="70"><f a=""><t path="Iterator"><c path="python.Dict.V"/></t></f></iterator>
		<__iter__ set="method"><f a=""><x path="python.NativeIterator"><c path="python.Dict.K"/></x></f></__iter__>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":native"><e>"dict"</e></m></meta>
	</class>
	<class path="python.DictView" params="T" file="C:\HaxeToolkit\haxe\std/python/Dict.hx" module="python.Dict" extern="1">
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length get="inline" set="null" line="79"><f a=""><x path="Int"/></f></get_length>
		<iter public="1" get="inline" set="null" line="83"><f a=""><x path="python.NativeIterator"><c path="python.DictView.T"/></x></f></iter>
		<iterator public="1" get="inline" set="null" line="87"><f a=""><t path="Iterator"><c path="python.DictView.T"/></t></f></iterator>
		<__iter__ set="method"><f a=""><x path="python.NativeIterator"><c path="python.DictView.T"/></x></f></__iter__>
	</class>
	<class path="python.BaseException" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<new public="1" set="method"><f a="args">
	<x path="haxe.extern.Rest"><d/></x>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"BaseException"</e></m></meta>
	</class>
	<class path="python.BufferError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.BaseException"/>
		<meta><m n=":native"><e>"BufferError"</e></m></meta>
	</class>
	<class path="python.GeneratorExit" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.BaseException"/>
		<meta><m n=":native"><e>"GeneratorExit"</e></m></meta>
	</class>
	<class path="python.KeyboardInterrupt" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.BaseException"/>
		<meta><m n=":native"><e>"KeyboardInterrupt"</e></m></meta>
	</class>
	<class path="python.Exception" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.BaseException"/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Exception"</e></m>
		</meta>
	</class>
	<class path="python.SyntaxError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="python.StopIteration" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"StopIteration"</e></m>
		</meta>
	</class>
	<class path="python.RuntimeError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"RuntimeError"</e></m></meta>
	</class>
	<class path="python.NotImplementedError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.RuntimeError"/>
		<meta><m n=":native"><e>"NotImplementedError"</e></m></meta>
	</class>
	<class path="python.IndentationError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.SyntaxError"/>
		<meta><m n=":native"><e>"IndentationError"</e></m></meta>
	</class>
	<class path="python.EnvironmentError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"EnvironmentError"</e></m></meta>
	</class>
	<class path="python.OSError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.EnvironmentError"/>
		<meta><m n=":native"><e>"OSError"</e></m></meta>
	</class>
	<class path="python.BlockingIOError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"BlockingIOError"</e></m></meta>
	</class>
	<class path="python.ChildProcessError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"ChildProcessError"</e></m></meta>
	</class>
	<class path="python.ConnectionError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"ConnectionError"</e></m></meta>
	</class>
	<class path="python.BrokenPipeError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ConnectionError"/>
		<meta><m n=":native"><e>"BrokenPipeError"</e></m></meta>
	</class>
	<class path="python.ConnectionAbortedError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ConnectionError"/>
		<meta><m n=":native"><e>"ConnectionAbortedError"</e></m></meta>
	</class>
	<class path="python.ConnectionRefusedError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ConnectionError"/>
		<meta><m n=":native"><e>"ConnectionRefusedError"</e></m></meta>
	</class>
	<class path="python.ConnectionResetError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ConnectionError"/>
		<meta><m n=":native"><e>"ConnectionResetError"</e></m></meta>
	</class>
	<class path="python.FileExistsError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"FileExistsError"</e></m></meta>
	</class>
	<class path="python.FileNotFoundError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"FileNotFoundError"</e></m></meta>
	</class>
	<class path="python.InterruptedError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"InterruptedError"</e></m></meta>
	</class>
	<class path="python.IsADirectoryError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"IsADirectoryError"</e></m></meta>
	</class>
	<class path="python.NotADirectoryError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"NotADirectoryError"</e></m></meta>
	</class>
	<class path="python.PermissionError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"PermissionError"</e></m></meta>
	</class>
	<class path="python.ProcessLookupError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"ProcessLookupError"</e></m></meta>
	</class>
	<class path="python.TimeoutError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"TimeoutError"</e></m></meta>
	</class>
	<class path="python.NameError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"NameError"</e></m></meta>
	</class>
	<class path="python.UnboundLocalError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.NameError"/>
		<meta><m n=":native"><e>"UnboundLocalError"</e></m></meta>
	</class>
	<class path="python.MemoryError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"MemoryError"</e></m></meta>
	</class>
	<class path="python.AssertionError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"AssertionError"</e></m></meta>
	</class>
	<class path="python.AttributeError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"AttributeError"</e></m></meta>
	</class>
	<class path="python.EOFError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"EOFError"</e></m></meta>
	</class>
	<class path="python.ArithmeticError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"ArithmeticError"</e></m></meta>
	</class>
	<class path="python.FloatingPointError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ArithmeticError"/>
		<meta><m n=":native"><e>"FloatingPointError"</e></m></meta>
	</class>
	<class path="python.OverflowError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ArithmeticError"/>
		<meta><m n=":native"><e>"OverflowError"</e></m></meta>
	</class>
	<class path="python.ZeroDivisionError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ArithmeticError"/>
		<meta><m n=":native"><e>"ZeroDivisionError"</e></m></meta>
	</class>
	<class path="python.ImportError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"ImportError"</e></m></meta>
	</class>
	<class path="python.LookupError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"LookupError"</e></m></meta>
	</class>
	<class path="python.IndexError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.LookupError"/>
		<meta><m n=":native"><e>"IndexError"</e></m></meta>
	</class>
	<class path="python.KeyError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.LookupError"/>
		<meta><m n=":native"><e>"KeyError"</e></m></meta>
	</class>
	<class path="python.IOError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.EnvironmentError"/>
		<meta><m n=":native"><e>"IOError"</e></m></meta>
	</class>
	<class path="python.VMSError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"VMSError"</e></m></meta>
	</class>
	<class path="python.WindowsError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"WindowsError"</e></m></meta>
	</class>
	<class path="python.ValueError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"ValueError"</e></m></meta>
	</class>
	<class path="python.UnicodeError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ValueError"/>
		<meta><m n=":native"><e>"UnicodeError"</e></m></meta>
	</class>
	<class path="python.UnicodeDecodeError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.UnicodeError"/>
		<meta><m n=":native"><e>"UnicodeDecodeError"</e></m></meta>
	</class>
	<class path="python.UnicodeEncodeError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.UnicodeError"/>
		<meta><m n=":native"><e>"UnicodeEncodeError"</e></m></meta>
	</class>
	<class path="python.UnicodeTranslateError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.UnicodeError"/>
		<meta><m n=":native"><e>"UnicodeTranslateError"</e></m></meta>
	</class>
	<class path="python.Warning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"Warning"</e></m></meta>
	</class>
	<class path="python.DeprecationWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"DeprecationWarning"</e></m></meta>
	</class>
	<class path="python.PendingDeprecationWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"PendingDeprecationWarning"</e></m></meta>
	</class>
	<class path="python.RuntimeWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"RuntimeWarning"</e></m></meta>
	</class>
	<class path="python.SyntaxWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"SyntaxWarning"</e></m></meta>
	</class>
	<class path="python.UserWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"UserWarning"</e></m></meta>
	</class>
	<class path="python.FutureWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"FutureWarning"</e></m></meta>
	</class>
	<class path="python.ImportWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"ImportWarning"</e></m></meta>
	</class>
	<class path="python.UnicodeWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"UnicodeWarning"</e></m></meta>
	</class>
	<class path="python.BytesWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"BytesWarning"</e></m></meta>
	</class>
	<class path="python.ResourceWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"ResourceWarning"</e></m></meta>
	</class>
	<class path="python.HaxeIterator" params="T" file="C:\HaxeToolkit\haxe\std/python/HaxeIterator.hx">
		<it><t path="python.NativeIteratorRaw"><c path="python.HaxeIterator.T"/></t></it>
		<x><t path="Null"><c path="python.HaxeIterator.T"/></t></x>
		<has><x path="Bool"/></has>
		<checked><x path="Bool"/></checked>
		<next public="1" get="inline" set="null" line="37"><f a=""><c path="python.HaxeIterator.T"/></f></next>
		<hasNext public="1" set="method" line="43"><f a=""><x path="Bool"/></f></hasNext>
		<new public="1" set="method" line="33"><f a="it">
	<t path="python.NativeIteratorRaw"><c path="python.HaxeIterator.T"/></t>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="python.KwArgs" params="T" file="C:\HaxeToolkit\haxe\std/python/KwArgs.hx">
		<from>
			<icast field="fromDict"><c path="python.Dict">
	<c path="String"/>
	<d/>
</c></icast>
			<icast field="fromT"><c path="fromT.T"/></icast>
		</from>
		<this><c path="python.Dict">
	<c path="String"/>
	<d/>
</c></this>
		<to><icast field="toDict"><c path="python.Dict">
	<c path="String"/>
	<d/>
</c></icast></to>
		<haxe_doc><![CDATA[This type represents python `**kwargs` feature, supporting
	passing named arguments to a function.

	Example:

	```haxe
	function f(kwargs:KwArgs<{a:Int}>) {}
	f({a: 10});
	```]]></haxe_doc>
		<impl><class path="python._KwArgs.KwArgs_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/KwArgs.hx" private="1" module="python.KwArgs">
	<fromT params="T" set="method" line="56" static="1">
		<f a="d">
			<c path="fromT.T"/>
			<x path="python.KwArgs"><c path="fromT.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromT>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
		<m n=":final"/>
	</meta>
</class></impl>
	</abstract>
	<class path="python._KwArgs.KwArgs_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/KwArgs.hx" private="1" module="python.KwArgs">
		<fromT params="T" set="method" line="56" static="1">
			<f a="d">
				<c path="fromT.T"/>
				<x path="python.KwArgs"><c path="fromT.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromT>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":final"/>
		</meta>
	</class>
	<typedef path="python.PySys" params="" file="C:\HaxeToolkit\haxe\std/python/Lib.hx" module="python.Lib"><c path="python.lib.Sys"/></typedef>
	<class path="python.Lib" params="" file="C:\HaxeToolkit\haxe\std/python/Lib.hx">
		<dictToAnon public="1" set="method" line="59" static="1">
			<f a="v">
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
				<d/>
			</f>
			<haxe_doc>Returns an anonymous Object which holds the same data as the Dictionary `v`.</haxe_doc>
		</dictToAnon>
		<anonToDict public="1" set="method" line="68" static="1">
			<f a="o">
				<a/>
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
			</f>
			<meta><m n=":access"><e>python.Boot.isAnonObject</e></m></meta>
			<haxe_doc>Returns a flat copy of the underlying Dictionary of `o`.</haxe_doc>
		</anonToDict>
		<anonAsDict public="1" set="method" line="82" static="1">
			<f a="o">
				<a/>
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
			</f>
			<meta><m n=":access"><e>python.Boot.isAnonObject</e></m></meta>
			<haxe_doc>Returns the underlying Dictionary of the anonymous object `o`.
	 	Modifications to this dictionary are reflected in the anonymous Object too.</haxe_doc>
		</anonAsDict>
		<dictAsAnon public="1" set="method" line="94" static="1">
			<f a="d">
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
				<d/>
			</f>
			<haxe_doc>Returns the Dictionary `d` as an anonymous Object.
	 	Modifications to the object are reflected in the Dictionary too.</haxe_doc>
		</dictAsAnon>
		<haxe_doc>Platform-specific Python Library. Provides some platform-specific functions 
	for the Python target, such as conversion from Haxe types to native types 
	and vice-versa.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="python.NativeIterable" params="T" file="C:\HaxeToolkit\haxe\std/python/NativeIterable.hx">
		<from><icast><t path="python.NativeIterableRaw"><c path="python.NativeIterable.T"/></t></icast></from>
		<this><t path="python.NativeIterableRaw"><c path="python.NativeIterable.T"/></t></this>
		<to>
			<icast><t path="python.NativeIterableRaw"><c path="python.NativeIterable.T"/></t></icast>
			<icast field="toHaxeIterable"><c path="python.HaxeIterable"><c path="python.NativeIterable.T"/></c></icast>
		</to>
		<haxe_doc>This type represents native Python iterables (objects that implement `__iter__()` method).
    It supports Haxe iteration and conversion to `Iterable` by creating wrapper objects.</haxe_doc>
		<impl><class path="python._NativeIterable.NativeIterable_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/NativeIterable.hx" private="1" module="python.NativeIterable"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<typedef path="python.NativeIterableRaw" params="T" file="C:\HaxeToolkit\haxe\std/python/NativeIterable.hx" module="python.NativeIterable">
		<a><__iter__ set="method"><f a=""><x path="python.NativeIterator"><c path="python.NativeIterableRaw.T"/></x></f></__iter__></a>
		<haxe_doc>Native Python iterable protocol.</haxe_doc>
	</typedef>
	<abstract path="python.NativeIterator" params="T" file="C:\HaxeToolkit\haxe\std/python/NativeIterator.hx">
		<this><t path="python.NativeIteratorRaw"><c path="python.NativeIterator.T"/></t></this>
		<to>
			<icast><x path="python.NativeIterable"><c path="python.NativeIterator.T"/></x></icast>
			<icast><t path="python.NativeIteratorRaw"><c path="python.NativeIterator.T"/></t></icast>
			<icast field="toHaxeIterator"><c path="python.HaxeIterator"><c path="python.NativeIterator.T"/></c></icast>
		</to>
		<haxe_doc>This type represents native Python iterators.
    It supports automatic conversion to Haxe `Iterator` by creating wrapper object.</haxe_doc>
		<impl><class path="python._NativeIterator.NativeIterator_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/NativeIterator.hx" private="1" module="python.NativeIterator"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<typedef path="python.NativeIteratorRaw" params="T" file="C:\HaxeToolkit\haxe\std/python/NativeIterator.hx" module="python.NativeIterator">
		<a>
			<__next__ set="method"><f a=""><c path="python.NativeIteratorRaw.T"/></f></__next__>
			<__iter__ set="method"><f a=""><x path="python.NativeIterator"><c path="python.NativeIteratorRaw.T"/></x></f></__iter__>
		</a>
		<haxe_doc>Native Python iterator protocol.</haxe_doc>
	</typedef>
	<class path="python.Syntax" params="" file="C:\HaxeToolkit\haxe\std/python/Syntax.hx" extern="1">
		<_newInstance public="1" set="method" static="1"><f a="c:args">
	<d/>
	<c path="Array"><d/></c>
	<d/>
</f></_newInstance>
		<isIn public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isIn>
		<delete public="1" set="method" static="1">
			<f a="a">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</delete>
		<binop public="1" set="method" static="1">
			<f a="a:op:b">
				<d/>
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</binop>
		<assign public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</assign>
		<_pythonCode public="1" params="T" set="method" static="1">
			<f a="b:args">
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="_pythonCode.T"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</_pythonCode>
		<_arrayAccess public="1" set="method" static="1">
			<f a="a:args:?trailingColon" v="::false">
				<d/>
				<c path="Array"><d/></c>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ trailingColon : false }</e></m></meta>
		</_arrayAccess>
		<arraySet public="1" set="method" static="1">
			<f a="a:i:v">
				<d/>
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</arraySet>
		<_foreach public="1" set="method" static="1"><f a="id:it:block">
	<d/>
	<d/>
	<d/>
	<d/>
</f></_foreach>
		<call public="1" set="method" static="1"><f a="e:args">
	<d/>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<field public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</field>
		<_tuple public="1" set="method" static="1"><f a="args">
	<c path="Array"><d/></c>
	<d/>
</f></_tuple>
		<varArgs public="1" set="method" static="1">
			<f a="args">
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</varArgs>
		<_callNamedUntyped public="1" set="method" static="1"><f a="e:args">
	<d/>
	<d/>
	<d/>
</f></_callNamedUntyped>
		<opPow public="1" set="method" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></opPow>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noPackageRestrict"/>
		</meta>
	</class>
	<class path="python.Tuple" params="X" file="C:\HaxeToolkit\haxe\std/python/Tuple.hx" extern="1">
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length public="1" get="inline" set="null" line="34"><f a=""><x path="Int"/></f></get_length>
		<toArray public="1" get="inline" set="null" line="38"><f a=""><c path="Array"><c path="python.Tuple.X"/></c></f></toArray>
		<new public="1" set="method">
			<f a="a">
				<c path="Array"><c path="python.Tuple.X"/></c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a=""><x path="Void"/></f></new></overloads>
		</new>
		<meta><m n=":native"><e>"tuple"</e></m></meta>
	</class>
	<class path="python.Tuple1" params="A" file="C:\HaxeToolkit\haxe\std/python/Tuple.hx" module="python.Tuple" extern="1">
		<extends path="python.Tuple"><d/></extends>
		<make public="1" params="A" get="inline" set="null" line="45" static="1"><f a="a">
	<c path="make.A"/>
	<c path="python.Tuple1"><c path="make.A"/></c>
</f></make>
		<_1 public="1" get="accessor" set="null"><c path="python.Tuple1.A"/></_1>
		<get__1 public="1" get="inline" set="null" line="47"><f a=""><c path="python.Tuple1.A"/></f></get__1>
		<meta><m n=":native"><e>"tuple"</e></m></meta>
	</class>
	<class path="python.Tuple2" params="A:B" file="C:\HaxeToolkit\haxe\std/python/Tuple.hx" module="python.Tuple" extern="1">
		<extends path="python.Tuple"><d/></extends>
		<make public="1" params="A:B" get="inline" set="null" line="52" static="1"><f a="a:b">
	<c path="make.A"/>
	<c path="make.B"/>
	<c path="python.Tuple2">
		<c path="make.A"/>
		<c path="make.B"/>
	</c>
</f></make>
		<_1 public="1" get="accessor" set="null"><c path="python.Tuple2.A"/></_1>
		<get__1 public="1" get="inline" set="null" line="54"><f a=""><c path="python.Tuple2.A"/></f></get__1>
		<_2 public="1" get="accessor" set="null"><c path="python.Tuple2.B"/></_2>
		<get__2 public="1" get="inline" set="null" line="56"><f a=""><c path="python.Tuple2.B"/></f></get__2>
		<meta><m n=":native"><e>"tuple"</e></m></meta>
	</class>
	<class path="python.Tuple3" params="A:B:C" file="C:\HaxeToolkit\haxe\std/python/Tuple.hx" module="python.Tuple" extern="1">
		<extends path="python.Tuple"><d/></extends>
		<make public="1" params="A:B:C" get="inline" set="null" line="61" static="1"><f a="a:b:c">
	<c path="make.A"/>
	<c path="make.B"/>
	<c path="make.C"/>
	<c path="python.Tuple3">
		<c path="make.A"/>
		<c path="make.B"/>
		<c path="make.C"/>
	</c>
</f></make>
		<_1 public="1" get="accessor" set="null"><c path="python.Tuple3.A"/></_1>
		<get__1 public="1" get="inline" set="null" line="63"><f a=""><c path="python.Tuple3.A"/></f></get__1>
		<_2 public="1" get="accessor" set="null"><c path="python.Tuple3.B"/></_2>
		<get__2 public="1" get="inline" set="null" line="65"><f a=""><c path="python.Tuple3.B"/></f></get__2>
		<_3 public="1" get="accessor" set="null"><c path="python.Tuple3.C"/></_3>
		<get__3 public="1" get="inline" set="null" line="67"><f a=""><c path="python.Tuple3.C"/></f></get__3>
		<meta><m n=":native"><e>"tuple"</e></m></meta>
	</class>
	<class path="python.Tuple4" params="A:B:C:D" file="C:\HaxeToolkit\haxe\std/python/Tuple.hx" module="python.Tuple" extern="1">
		<extends path="python.Tuple"><d/></extends>
		<make public="1" params="A:B:C:D" get="inline" set="null" line="72" static="1"><f a="a:b:c:d">
	<c path="make.A"/>
	<c path="make.B"/>
	<c path="make.C"/>
	<c path="make.D"/>
	<c path="python.Tuple4">
		<c path="make.A"/>
		<c path="make.B"/>
		<c path="make.C"/>
		<c path="make.D"/>
	</c>
</f></make>
		<_1 public="1" get="accessor" set="null"><c path="python.Tuple4.A"/></_1>
		<get__1 public="1" get="inline" set="null" line="74"><f a=""><c path="python.Tuple4.A"/></f></get__1>
		<_2 public="1" get="accessor" set="null"><c path="python.Tuple4.B"/></_2>
		<get__2 public="1" get="inline" set="null" line="76"><f a=""><c path="python.Tuple4.B"/></f></get__2>
		<_3 public="1" get="accessor" set="null"><c path="python.Tuple4.C"/></_3>
		<get__3 public="1" get="inline" set="null" line="78"><f a=""><c path="python.Tuple4.C"/></f></get__3>
		<_4 public="1" get="accessor" set="null"><c path="python.Tuple4.D"/></_4>
		<get__4 public="1" get="inline" set="null" line="80"><f a=""><c path="python.Tuple4.D"/></f></get__4>
		<meta><m n=":native"><e>"tuple"</e></m></meta>
	</class>
	<class path="python.Tuple5" params="A:B:C:D:E" file="C:\HaxeToolkit\haxe\std/python/Tuple.hx" module="python.Tuple" extern="1">
		<extends path="python.Tuple"><d/></extends>
		<make public="1" params="A:B:C:D:E" get="inline" set="null" line="85" static="1"><f a="a:b:c:d:e">
	<c path="make.A"/>
	<c path="make.B"/>
	<c path="make.C"/>
	<c path="make.D"/>
	<c path="make.E"/>
	<c path="python.Tuple5">
		<c path="make.A"/>
		<c path="make.B"/>
		<c path="make.C"/>
		<c path="make.D"/>
		<c path="make.E"/>
	</c>
</f></make>
		<_1 public="1" get="accessor" set="null"><c path="python.Tuple5.A"/></_1>
		<get__1 public="1" get="inline" set="null" line="87"><f a=""><c path="python.Tuple5.A"/></f></get__1>
		<_2 public="1" get="accessor" set="null"><c path="python.Tuple5.B"/></_2>
		<get__2 public="1" get="inline" set="null" line="89"><f a=""><c path="python.Tuple5.B"/></f></get__2>
		<_3 public="1" get="accessor" set="null"><c path="python.Tuple5.C"/></_3>
		<get__3 public="1" get="inline" set="null" line="91"><f a=""><c path="python.Tuple5.C"/></f></get__3>
		<_4 public="1" get="accessor" set="null"><c path="python.Tuple5.D"/></_4>
		<get__4 public="1" get="inline" set="null" line="93"><f a=""><c path="python.Tuple5.D"/></f></get__4>
		<_5 public="1" get="accessor" set="null"><c path="python.Tuple5.E"/></_5>
		<get__5 public="1" get="inline" set="null" line="95"><f a=""><c path="python.Tuple5.E"/></f></get__5>
		<meta><m n=":native"><e>"tuple"</e></m></meta>
	</class>
	<abstract path="python.VarArgs" params="T" file="C:\HaxeToolkit\haxe\std/python/VarArgs.hx">
		<from><icast field="fromArray"><c path="Array"><c path="fromArray.T"/></c></icast></from>
		<this><d/></this>
		<to><icast field="toArray"><c path="Array"><c path="python.VarArgs.T"/></c></icast></to>
		<haxe_doc><![CDATA[This type represents python `*args` feature, supporting
	passing arbitrary number of arguments to a function.

	Example:

	```haxe
	function f(args:VarArgs<Int>) {}
	f([1, 2, 3]);
	```]]></haxe_doc>
		<meta><m n=":analyzer"><e>no_simplification</e></m></meta>
		<impl><class path="python._VarArgs.VarArgs_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/VarArgs.hx" private="1" module="python.VarArgs"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<class path="python.internal.AnonObject" params="" file="C:\HaxeToolkit\haxe\std/python/internal/AnonObject.hx">
		<new public="1" set="method" line="26"><f a="fields">
	<c path="python.Dict">
		<c path="String"/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"_hx_AnonObject"</e></m>
		</meta>
	</class>
	<class path="python.internal.ArrayImpl" params="" file="C:\HaxeToolkit\haxe\std/python/internal/ArrayImpl.hx">
		<concat public="1" params="T" get="inline" set="null" line="34" static="1">
			<f a="a1:a2">
				<c path="Array"><c path="concat.T"/></c>
				<c path="Array"><c path="concat.T"/></c>
				<c path="Array"><c path="concat.T"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.concat"</e>
	<e>"anon_optional_read.concat"</e>
	<e>"python.internal.ArrayImpl.concat"</e>
</m></meta>
		</concat>
		<iterator public="1" params="T" get="inline" set="null" line="44" static="1">
			<f a="x">
				<c path="Array"><c path="iterator.T"/></c>
				<t path="Iterator"><c path="iterator.T"/></t>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.iterator"</e>
	<e>"anon_optional_read.iterator"</e>
	<e>"python.internal.ArrayImpl.iterator"</e>
</m></meta>
		</iterator>
		<indexOf public="1" params="T" set="method" line="49" static="1">
			<f a="a:x:?fromIndex">
				<c path="Array"><c path="indexOf.T"/></c>
				<c path="indexOf.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.indexOf"</e>
	<e>"anon_optional_read.indexOf"</e>
	<e>"python.internal.ArrayImpl.indexOf"</e>
</m></meta>
		</indexOf>
		<lastIndexOf public="1" params="T" set="method" line="63" static="1">
			<f a="a:x:?fromIndex">
				<c path="Array"><c path="lastIndexOf.T"/></c>
				<c path="lastIndexOf.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.lastIndexOf"</e>
	<e>"anon_optional_read.lastIndexOf"</e>
	<e>"python.internal.ArrayImpl.lastIndexOf"</e>
</m></meta>
		</lastIndexOf>
		<toString public="1" params="T" get="inline" set="null" line="83" static="1">
			<f a="x">
				<c path="Array"><c path="toString.T"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.toString"</e>
	<e>"anon_optional_read.toString"</e>
	<e>"python.internal.ArrayImpl.toString"</e>
</m></meta>
		</toString>
		<pop public="1" params="T" get="inline" set="null" line="88" static="1">
			<f a="x">
				<c path="Array"><c path="pop.T"/></c>
				<t path="Null"><c path="pop.T"/></t>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.pop"</e>
	<e>"anon_optional_read.pop"</e>
	<e>"python.internal.ArrayImpl.pop"</e>
</m></meta>
		</pop>
		<push public="1" params="T" get="inline" set="null" line="93" static="1">
			<f a="x:e">
				<c path="Array"><c path="push.T"/></c>
				<c path="push.T"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.push"</e>
	<e>"anon_optional_read.push"</e>
	<e>"python.internal.ArrayImpl.push"</e>
</m></meta>
		</push>
		<unshift public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="x:e">
				<c path="Array"><c path="unshift.T"/></c>
				<c path="unshift.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.unshift"</e>
	<e>"anon_optional_read.unshift"</e>
	<e>"python.internal.ArrayImpl.unshift"</e>
</m></meta>
		</unshift>
		<remove public="1" params="T" set="method" line="104" static="1">
			<f a="x:e">
				<c path="Array"><c path="remove.T"/></c>
				<c path="remove.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.remove"</e>
	<e>"anon_optional_read.remove"</e>
	<e>"python.internal.ArrayImpl.remove"</e>
</m></meta>
		</remove>
		<shift public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="x">
				<c path="Array"><c path="shift.T"/></c>
				<t path="Null"><c path="shift.T"/></t>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.shift"</e>
	<e>"anon_optional_read.shift"</e>
	<e>"python.internal.ArrayImpl.shift"</e>
</m></meta>
		</shift>
		<slice public="1" params="T" get="inline" set="null" line="120" static="1">
			<f a="x:pos:?end">
				<c path="Array"><c path="slice.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="slice.T"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.slice"</e>
	<e>"anon_optional_read.slice"</e>
	<e>"python.internal.ArrayImpl.slice"</e>
</m></meta>
		</slice>
		<sort public="1" params="T" get="inline" set="null" line="124" static="1">
			<f a="x:f">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.sort"</e>
	<e>"anon_optional_read.sort"</e>
	<e>"python.internal.ArrayImpl.sort"</e>
</m></meta>
		</sort>
		<splice public="1" params="T" get="inline" set="null" line="129" static="1">
			<f a="x:pos:len">
				<c path="Array"><c path="splice.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="splice.T"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.splice"</e>
	<e>"anon_optional_read.splice"</e>
	<e>"python.internal.ArrayImpl.splice"</e>
</m></meta>
		</splice>
		<map public="1" params="S:T" get="inline" set="null" line="138" static="1">
			<f a="x:f">
				<c path="Array"><c path="map.T"/></c>
				<f a="">
					<c path="map.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.map"</e>
	<e>"anon_optional_read.map"</e>
	<e>"python.internal.ArrayImpl.map"</e>
</m></meta>
		</map>
		<filter public="1" params="T" get="inline" set="null" line="143" static="1">
			<f a="x:f">
				<c path="Array"><c path="filter.T"/></c>
				<f a="">
					<c path="filter.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.T"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.filter"</e>
	<e>"anon_optional_read.filter"</e>
	<e>"python.internal.ArrayImpl.filter"</e>
</m></meta>
		</filter>
		<insert public="1" params="T" get="inline" set="null" line="148" static="1">
			<f a="a:pos:x">
				<c path="Array"><c path="insert.T"/></c>
				<x path="Int"/>
				<c path="insert.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.insert"</e>
	<e>"anon_optional_read.insert"</e>
	<e>"python.internal.ArrayImpl.insert"</e>
</m></meta>
		</insert>
		<reverse public="1" params="T" get="inline" set="null" line="152" static="1">
			<f a="a">
				<c path="Array"><c path="reverse.T"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.reverse"</e>
	<e>"anon_optional_read.reverse"</e>
	<e>"python.internal.ArrayImpl.reverse"</e>
</m></meta>
		</reverse>
		<_get params="T" get="inline" set="null" line="157" static="1">
			<f a="x:idx">
				<c path="Array"><c path="_get.T"/></c>
				<x path="Int"/>
				<c path="_get.T"/>
			</f>
			<meta><m n=":ifFeature"><e>"array_read"</e></m></meta>
		</_get>
		<_set params="T" get="inline" set="null" line="162" static="1">
			<f a="x:idx:v">
				<c path="Array"><c path="_set.T"/></c>
				<x path="Int"/>
				<c path="_set.T"/>
				<c path="_set.T"/>
			</f>
			<meta><m n=":ifFeature"><e>"array_write"</e></m></meta>
		</_set>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>Array</e></m>
		</meta>
	</class>
	<class path="python.internal.EnumImpl" params="" file="C:\HaxeToolkit\haxe\std/python/internal/EnumImpl.hx">
		<tag public="1">
			<c path="String"/>
			<meta><m n=":ifFeature">
	<e>"has_enum"</e>
	<e>"Enum.*"</e>
</m></meta>
		</tag>
		<index public="1">
			<x path="Int"/>
			<meta><m n=":ifFeature">
	<e>"has_enum"</e>
	<e>"Enum.*"</e>
</m></meta>
		</index>
		<params public="1">
			<c path="Array"><d/></c>
			<meta><m n=":ifFeature">
	<e>"has_enum"</e>
	<e>"Enum.*"</e>
</m></meta>
		</params>
		<__str__ set="method" line="44">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature">
	<e>"has_enum"</e>
	<e>"Enum.*"</e>
</m></meta>
		</__str__>
		<new public="1" set="method" line="37">
			<f a="tag:index:params">
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"has_enum"</e>
	<e>"Enum.*"</e>
</m></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":ifFeature">
				<e>"has_enum"</e>
				<e>"Enum.*"</e>
			</m>
			<m n=":native"><e>"Enum"</e></m>
		</meta>
	</class>
	<class path="python.internal.HxException" params="" file="C:\HaxeToolkit\haxe\std/python/internal/HxException.hx">
		<extends path="python.Exception"/>
		<val public="1">
			<d/>
			<meta><m n=":ifFeature"><e>"has_throw"</e></m></meta>
		</val>
		<new public="1" set="method" line="30">
			<f a="val">
				<unknown/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"has_throw"</e></m></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":ifFeature"><e>"has_throw"</e></m>
			<m n=":native"><e>"_HxException"</e></m>
		</meta>
	</class>
	<class path="python.internal.StringImpl" params="" file="C:\HaxeToolkit\haxe\std/python/internal/StringImpl.hx">
		<split public="1" get="inline" set="null" line="30" static="1">
			<f a="s:d">
				<c path="String"/>
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.split"</e>
	<e>"anon_optional_read.split"</e>
	<e>"python.internal.StringImpl.split"</e>
</m></meta>
		</split>
		<charCodeAt public="1" set="method" line="35" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.charCodeAt"</e>
	<e>"anon_optional_read.charCodeAt"</e>
	<e>"python.internal.StringImpl.charCodeAt"</e>
</m></meta>
		</charCodeAt>
		<charAt public="1" get="inline" set="null" line="42" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.charAt"</e>
	<e>"anon_optional_read.charAt"</e>
	<e>"python.internal.StringImpl.charAt"</e>
</m></meta>
		</charAt>
		<lastIndexOf public="1" get="inline" set="null" line="47" static="1">
			<f a="s:str:?startIndex">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.lastIndexOf"</e>
	<e>"anon_optional_read.lastIndexOf"</e>
	<e>"python.internal.StringImpl.lastIndexOf"</e>
</m></meta>
		</lastIndexOf>
		<toUpperCase public="1" get="inline" set="null" line="64" static="1">
			<f a="s">
				<c path="String"/>
				<unknown/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.toUpperCase"</e>
	<e>"anon_optional_read.toUpperCase"</e>
	<e>"python.internal.StringImpl.toUpperCase"</e>
</m></meta>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="69" static="1">
			<f a="s">
				<c path="String"/>
				<unknown/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.toLowerCase"</e>
	<e>"anon_optional_read.toLowerCase"</e>
	<e>"python.internal.StringImpl.toLowerCase"</e>
</m></meta>
		</toLowerCase>
		<indexOf public="1" get="inline" set="null" line="73" static="1">
			<f a="s:str:?startIndex">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.indexOf"</e>
	<e>"anon_optional_read.indexOf"</e>
	<e>"python.internal.StringImpl.indexOf"</e>
</m></meta>
		</indexOf>
		<toString public="1" get="inline" set="null" line="80" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.toString"</e>
	<e>"anon_optional_read.toString"</e>
	<e>"python.internal.StringImpl.toString"</e>
</m></meta>
		</toString>
		<substring public="1" set="method" line="96" static="1">
			<f a="s:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.substring"</e>
	<e>"anon_optional_read.substring"</e>
	<e>"python.internal.StringImpl.substring"</e>
</m></meta>
		</substring>
		<substr public="1" set="method" line="112" static="1">
			<f a="s:startIndex:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.substr"</e>
	<e>"anon_optional_read.substr"</e>
	<e>"python.internal.StringImpl.substr"</e>
</m></meta>
		</substr>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"HxString"</e></m>
		</meta>
	</class>
	<class path="python.lib.Functools" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Functools.hx" extern="1">
		<cmp_to_key public="1" params="A" set="method" static="1"><f a="f">
	<f a=":">
		<c path="cmp_to_key.A"/>
		<c path="cmp_to_key.A"/>
		<x path="Int"/>
	</f>
	<d/>
</f></cmp_to_key>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":pythonImport"><e>"functools"</e></m>
		</meta>
	</class>
	<class path="python.lib.Inspect" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Inspect.hx" extern="1">
		<getmembers public="1" set="method" static="1"><f a="object:?predicate">
	<d/>
	<f a="">
		<d/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="python.Tuple2">
	<c path="String"/>
	<d/>
</c></c>
</f></getmembers>
		<ismethod public="1" set="method" static="1"><f a="object">
	<d/>
	<x path="Bool"/>
</f></ismethod>
		<isclass public="1" set="method" static="1"><f a="object">
	<d/>
	<x path="Bool"/>
</f></isclass>
		<isfunction public="1" set="method" static="1"><f a="object">
	<d/>
	<x path="Bool"/>
</f></isfunction>
		<getsourcefile public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="String"/>
</f></getsourcefile>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":pythonImport"><e>"inspect"</e></m>
		</meta>
	</class>
	<typedef path="python.lib.JsonDumpsOptions" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Json.hx" module="python.lib.Json"><a>
	<sort_keys>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</sort_keys>
	<skipkeys>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</skipkeys>
	<separators>
		<t path="Null"><c path="python.Tuple2">
	<c path="String"/>
	<c path="String"/>
</c></t>
		<meta><m n=":optional"/></meta>
	</separators>
	<indent>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</indent>
	<ensure_ascii>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</ensure_ascii>
	<def>
		<t path="Null"><f a="">
	<d/>
	<c path="String"/>
</f></t>
		<meta>
			<m n=":optional"/>
			<m n=":native"><e>"default"</e></m>
		</meta>
	</def>
	<cls>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</cls>
	<check_circular>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</check_circular>
	<allow_nan>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</allow_nan>
</a></typedef>
	<typedef path="python.lib.JsonLoadsOptions" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Json.hx" module="python.lib.Json"><a>
	<object_hook>
		<t path="Null"><f a="">
	<c path="python.Dict">
		<c path="String"/>
		<d/>
	</c>
	<d/>
</f></t>
		<meta><m n=":optional"/></meta>
	</object_hook>
	<encoding>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</encoding>
	<cls>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</cls>
</a></typedef>
	<class path="python.lib.Json" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Json.hx" extern="1">
		<loads public="1" set="method" static="1"><f a="s:?options">
	<c path="String"/>
	<x path="python.KwArgs"><t path="python.lib.JsonLoadsOptions"/></x>
	<c path="python.Dict">
		<c path="String"/>
		<d/>
	</c>
</f></loads>
		<dumps public="1" set="method" static="1"><f a="x:?options">
	<d/>
	<x path="python.KwArgs"><t path="python.lib.JsonDumpsOptions"/></x>
	<c path="String"/>
</f></dumps>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":pythonImport"><e>"json"</e></m>
		</meta>
	</class>
	<class path="python.lib.Random" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Random.hx" extern="1">
		<random public="1" set="method" static="1"><f a=""><x path="Float"/></f></random>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":pythonImport"><e>"random"</e></m>
		</meta>
	</class>
	<abstract path="python.lib._Re.Choice" params="A:B" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" private="1" module="python.lib.Re">
		<from>
			<icast field="fromA"><c path="fromA.A"/></icast>
			<icast field="fromB"><c path="fromB.B"/></icast>
		</from>
		<this><d/></this>
		<impl><class path="python.lib._Re.Choice_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" private="1" module="python.lib.Re"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<typedef path="python.lib.TODO" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" module="python.lib.Re"><d/></typedef>
	<typedef path="python.lib.Pattern" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" module="python.lib.Re"><x path="python.lib._Re.Choice">
	<c path="String"/>
	<c path="python.lib.Regex"/>
</x></typedef>
	<typedef path="python.lib.Repl" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" module="python.lib.Re"><x path="python.lib._Re.Choice">
	<c path="String"/>
	<f a="">
		<c path="python.lib.MatchObject"/>
		<c path="String"/>
	</f>
</x></typedef>
	<class path="python.lib.MatchObject" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" module="python.lib.Re" extern="1">
		<pos public="1" set="null"><x path="Int"/></pos>
		<endpos public="1" set="null"><x path="Int"/></endpos>
		<lastindex public="1" set="null"><x path="Int"/></lastindex>
		<lastgroup public="1" set="null"><x path="Int"/></lastgroup>
		<re public="1" set="null"><c path="python.lib.Regex"/></re>
		<string public="1" set="null"><c path="String"/></string>
		<expand public="1" set="method"><f a="template">
	<c path="String"/>
	<c path="String"/>
</f></expand>
		<group public="1" set="method">
			<f a="?i" v="0">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ i : 0 }</e></m></meta>
			<overloads><group public="1" set="method"><f a="x">
	<c path="String"/>
	<c path="String"/>
</f></group></overloads>
		</group>
		<groups public="1" set="method">
			<f a="?defaultVal" v="null">
				<c path="String"/>
				<c path="python.Tuple"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{ defaultVal : null }</e></m></meta>
		</groups>
		<groupdict public="1" set="method">
			<f a="?defaultVal" v="null">
				<c path="python.Dict">
					<c path="String"/>
					<c path="String"/>
				</c>
				<c path="python.Dict">
					<c path="String"/>
					<c path="String"/>
				</c>
			</f>
			<meta><m n=":value"><e>{ defaultVal : null }</e></m></meta>
		</groupdict>
		<start public="1" set="method">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ i : 0 }</e></m></meta>
			<overloads><start public="1" set="method"><f a="x">
	<c path="String"/>
	<x path="Int"/>
</f></start></overloads>
		</start>
		<end public="1" set="method">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ i : 0 }</e></m></meta>
			<overloads><end public="1" set="method"><f a="x">
	<c path="String"/>
	<x path="Int"/>
</f></end></overloads>
		</end>
		<span public="1" set="method"><f a="?i">
	<x path="Int"/>
	<c path="python.Tuple2">
		<x path="Int"/>
		<x path="Int"/>
	</c>
</f></span>
		<groupById public="1" get="inline" set="null" line="68"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></groupById>
		<startById public="1" get="inline" set="null" line="72"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></startById>
		<endById public="1" get="inline" set="null" line="76"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></endById>
	</class>
	<class path="python.lib.Regex" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" module="python.lib.Re" extern="1">
		<search public="1" set="method">
			<f a="string:?pos:?endpos" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="Null"><c path="python.lib.MatchObject"/></t>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</search>
		<match public="1" set="method">
			<f a="string:?pos:?endpos" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="Null"><c path="python.lib.MatchObject"/></t>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</match>
		<split public="1" set="method">
			<f a="string:?maxsplit" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{ maxsplit : 0 }</e></m></meta>
		</split>
		<findallString public="1" get="inline" set="null" line="105"><f a="string:?pos:?endpos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="String"/></c>
</f></findallString>
		<findallDynamic public="1" get="inline" set="null" line="111"><f a="string:?pos:?endpos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></findallDynamic>
		<findallTuple public="1" get="inline" set="null" line="116"><f a="string:?pos:?endpos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="python.Tuple"><c path="String"/></c></c>
</f></findallTuple>
		<findallArray public="1" get="inline" set="null" line="121"><f a="string:?pos:?endpos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="Array"><c path="String"/></c></c>
</f></findallArray>
		<finditer public="1" set="method"><f a="string:?pos:?endpos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="python.NativeIterator"><c path="python.lib.MatchObject"/></x>
</f></finditer>
		<sub public="1" set="method">
			<f a="repl:string:?count" v="::0">
				<t path="python.lib.Repl"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ count : 0 }</e></m></meta>
		</sub>
		<subn public="1" set="method">
			<f a="repl:string:?count" v="::0">
				<t path="python.lib.Repl"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ count : 0 }</e></m></meta>
		</subn>
		<flags public="1" set="null"><x path="Int"/></flags>
		<groups public="1" set="null"><x path="Int"/></groups>
		<groupindex public="1" set="null"><c path="python.Dict">
	<c path="String"/>
	<x path="Int"/>
</c></groupindex>
		<pattern public="1" set="null"><c path="String"/></pattern>
	</class>
	<class path="python.lib.Re" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" extern="1">
		<A public="1" static="1"><x path="Int"/></A>
		<ASCII public="1" static="1"><x path="Int"/></ASCII>
		<DEBUG public="1" static="1"><x path="Int"/></DEBUG>
		<I public="1" static="1"><x path="Int"/></I>
		<IGNORECASE public="1" static="1"><x path="Int"/></IGNORECASE>
		<L public="1" static="1"><x path="Int"/></L>
		<LOCALE public="1" static="1"><x path="Int"/></LOCALE>
		<M public="1" static="1"><x path="Int"/></M>
		<MULTILINE public="1" static="1"><x path="Int"/></MULTILINE>
		<S public="1" static="1"><x path="Int"/></S>
		<DOTALL public="1" static="1"><x path="Int"/></DOTALL>
		<X public="1" static="1"><x path="Int"/></X>
		<VERBOSE public="1" static="1"><x path="Int"/></VERBOSE>
		<U public="1" static="1"><x path="Int"/></U>
		<UNICODE public="1" static="1"><x path="Int"/></UNICODE>
		<compile public="1" set="method" static="1">
			<f a="pattern:?flags" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<c path="python.lib.Regex"/>
			</f>
			<meta><m n=":value"><e>{ flags : 0 }</e></m></meta>
		</compile>
		<match public="1" set="method" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><c path="python.lib.MatchObject"/></t>
			</f>
			<meta><m n=":value"><e>{ flags : 0 }</e></m></meta>
		</match>
		<search public="1" set="method" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><c path="python.lib.MatchObject"/></t>
			</f>
			<meta><m n=":value"><e>{ flags : 0 }</e></m></meta>
		</search>
		<split public="1" set="method" static="1">
			<f a="pattern:string:?maxsplit:?flags" v="::0:0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{ flags : 0, maxsplit : 0 }</e></m></meta>
		</split>
		<findallDynamic public="1" get="inline" set="null" line="173" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":value"><e>{ flags : 0 }</e></m></meta>
		</findallDynamic>
		<findallString public="1" get="inline" set="null" line="179" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{ flags : 0 }</e></m></meta>
		</findallString>
		<findallTuple public="1" get="inline" set="null" line="184" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="python.Tuple"><c path="String"/></c></c>
			</f>
			<meta><m n=":value"><e>{ flags : 0 }</e></m></meta>
		</findallTuple>
		<findallArray public="1" get="inline" set="null" line="189" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="Array"><c path="String"/></c></c>
			</f>
			<meta><m n=":value"><e>{ flags : 0 }</e></m></meta>
		</findallArray>
		<finditer public="1" set="method" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="python.NativeIterator"><c path="python.lib.MatchObject"/></x>
			</f>
			<meta><m n=":value"><e>{ flags : 0 }</e></m></meta>
		</finditer>
		<sub public="1" set="method" static="1">
			<f a="pattern:repl:string:?count:?flags" v=":::0:0">
				<t path="python.lib.Pattern"/>
				<f a="">
					<c path="python.lib.MatchObject"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ flags : 0, count : 0 }</e></m></meta>
			<overloads><sub public="1" set="method">
	<f a="pattern:repl:string:?count:?flags" v=":::0:0">
		<t path="python.lib.Pattern"/>
		<c path="String"/>
		<c path="String"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":value"><e>{ flags : 0, count : 0 }</e></m></meta>
</sub></overloads>
		</sub>
		<subn public="1" set="method" static="1">
			<f a="pattern:repl:string:?count:?flags" v=":::0:0">
				<t path="python.lib.Pattern"/>
				<t path="python.lib.Repl"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ flags : 0, count : 0 }</e></m></meta>
		</subn>
		<escape public="1" set="method" static="1"><f a="string">
	<c path="String"/>
	<t path="python.lib.TODO"/>
</f></escape>
		<purge public="1" set="method" static="1"><f a=""><x path="Void"/></f></purge>
		<meta><m n=":pythonImport"><e>"re"</e></m></meta>
	</class>
	<class path="python.lib.TB" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Sys.hx" module="python.lib.Sys" extern="1"/>
	<class path="python.lib.Frame" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Sys.hx" module="python.lib.Sys" extern="1"/>
	<class path="python.lib.Sys" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Sys.hx" extern="1">
		<argv public="1" set="null" static="1"><c path="Array"><c path="String"/></c></argv>
		<executable public="1" set="null" static="1"><c path="String"/></executable>
		<exit public="1" set="method" static="1"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></exit>
		<getfilesystemencoding public="1" set="method" static="1"><f a=""><c path="String"/></f></getfilesystemencoding>
		<version public="1" static="1"><c path="String"/></version>
		<platform public="1" static="1"><c path="String"/></platform>
		<stdout public="1" set="null" static="1"><c path="python.lib.io.TextIOBase"/></stdout>
		<stdin public="1" set="null" static="1"><c path="python.lib.io.TextIOBase"/></stdin>
		<stderr public="1" set="null" static="1"><c path="python.lib.io.TextIOBase"/></stderr>
		<getsizeof public="1" set="method" static="1"><f a="t">
	<d/>
	<x path="Int"/>
</f></getsizeof>
		<maxsize public="1" static="1"><x path="Int"/></maxsize>
		<exc_info public="1" params="T" set="method" static="1"><f a=""><c path="python.Tuple3">
	<x path="Class"><c path="exc_info.T"/></x>
	<c path="exc_info.T"/>
	<c path="python.lib.TB"/>
</c></f></exc_info>
		<version_info public="1" static="1"><c path="python.Tuple5">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
</c></version_info>
		<meta><m n=":pythonImport"><e>"sys"</e></m></meta>
	</class>
	<class path="python.lib.Time" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Time.hx" extern="1">
		<time public="1" set="method" static="1"><f a=""><x path="Float"/></f></time>
		<clock public="1" set="method" static="1"><f a=""><x path="Float"/></f></clock>
		<sleep public="1" set="method" static="1"><f a="t">
	<x path="Float"/>
	<x path="Void"/>
</f></sleep>
		<mktime public="1" set="method" static="1"><f a="s">
	<c path="python.lib.time.StructTime"/>
	<x path="Float"/>
</f></mktime>
		<meta><m n=":pythonImport"><e>"time"</e></m></meta>
	</class>
	<class path="python.lib.datetime.Timedelta" params="" file="C:\HaxeToolkit\haxe\std/python/lib/datetime/Timedelta.hx" extern="1">
		<min public="1" static="1"><c path="python.lib.datetime.Timedelta"/></min>
		<max public="1" static="1"><c path="python.lib.datetime.Timedelta"/></max>
		<resolution public="1" static="1"><c path="python.lib.datetime.Timedelta"/></resolution>
		<days public="1"><x path="Int"/></days>
		<seconds public="1"><x path="Int"/></seconds>
		<microseconds public="1"><x path="Int"/></microseconds>
		<total_seconds public="1" set="method"><f a=""><x path="Float"/></f></total_seconds>
		<new public="1" set="method">
			<f a="?days:?seconds:?microseconds:?milliseconds:?minutes:?hours:?weeks" v="0:0:0:0:0:0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ weeks : 0, hours : 0, minutes : 0, milliseconds : 0, microseconds : 0, seconds : 0, days : 0 }</e></m></meta>
		</new>
		<meta><m n=":pythonImport">
	<e>"datetime"</e>
	<e>"timedelta"</e>
</m></meta>
	</class>
	<class path="python.lib.io.IIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/IOBase.hx" module="python.lib.io.IOBase" extern="1" interface="1">
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<readline public="1" set="method">
			<f a="?limit" v="-1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ limit : -1 }</e></m></meta>
		</readline>
		<readable public="1" set="method"><f a=""><x path="Bool"/></f></readable>
		<closed public="1" set="null"><x path="Bool"/></closed>
		<readlines public="1" set="method">
			<f a="?hint" v="-1">
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{ hint : -1 }</e></m></meta>
		</readlines>
		<tell public="1" set="method"><f a=""><x path="Int"/></f></tell>
		<writable public="1" set="method"><f a=""><x path="Bool"/></f></writable>
		<seekable public="1" set="method"><f a=""><x path="Bool"/></f></seekable>
		<fileno public="1" set="method"><f a=""><x path="Int"/></f></fileno>
		<seek public="1" set="method"><f a="offset:whence">
	<x path="Int"/>
	<x path="python.lib.io.SeekSet"/>
	<x path="Int"/>
</f></seek>
		<truncate public="1" set="method"><f a="size">
	<x path="Int"/>
	<x path="Int"/>
</f></truncate>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.io.IOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/IOBase.hx" extern="1">
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<readline public="1" set="method">
			<f a="?limit" v="-1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ limit : -1 }</e></m></meta>
		</readline>
		<readable public="1" set="method"><f a=""><x path="Bool"/></f></readable>
		<closed public="1" set="null"><x path="Bool"/></closed>
		<readlines public="1" set="method">
			<f a="?hint" v="-1">
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{ hint : -1 }</e></m></meta>
		</readlines>
		<tell public="1" set="method"><f a=""><x path="Int"/></f></tell>
		<writable public="1" set="method"><f a=""><x path="Bool"/></f></writable>
		<seekable public="1" set="method"><f a=""><x path="Bool"/></f></seekable>
		<fileno public="1" set="method"><f a=""><x path="Int"/></f></fileno>
		<seek public="1" set="method"><f a="offset:whence">
	<x path="Int"/>
	<x path="python.lib.io.SeekSet"/>
	<x path="Int"/>
</f></seek>
		<truncate public="1" set="method"><f a="size">
	<x path="Int"/>
	<x path="Int"/>
</f></truncate>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"IOBase"</e>
</m></meta>
	</class>
	<class path="python.lib.io.IBufferedIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/BufferedIOBase.hx" module="python.lib.io.BufferedIOBase" extern="1" interface="1">
		<raw public="1"><c path="python.lib.io.RawIOBase"/></raw>
		<write public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<x path="Int"/>
</f></write>
		<readinto public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<x path="Int"/>
</f></readinto>
		<detach public="1" set="method"><f a=""><c path="python.lib.io.RawIOBase"/></f></detach>
		<read public="1" set="method">
			<f a="?n" v="-1">
				<x path="Int"/>
				<t path="Null"><c path="python.Bytes"/></t>
			</f>
			<meta><m n=":value"><e>{ n : -1 }</e></m></meta>
		</read>
		<read1 public="1" set="method">
			<f a="?n" v="-1">
				<x path="Int"/>
				<t path="Null"><c path="python.Bytes"/></t>
			</f>
			<meta><m n=":value"><e>{ n : -1 }</e></m></meta>
		</read1>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.io.BufferedIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/BufferedIOBase.hx" extern="1">
		<extends path="python.lib.io.IOBase"/>
		<raw public="1"><c path="python.lib.io.RawIOBase"/></raw>
		<write public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<x path="Int"/>
</f></write>
		<readinto public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<x path="Int"/>
</f></readinto>
		<detach public="1" set="method"><f a=""><c path="python.lib.io.RawIOBase"/></f></detach>
		<read public="1" set="method">
			<f a="?n" v="-1">
				<x path="Int"/>
				<t path="Null"><c path="python.Bytes"/></t>
			</f>
			<meta><m n=":value"><e>{ n : -1 }</e></m></meta>
		</read>
		<read1 public="1" set="method">
			<f a="?n" v="-1">
				<x path="Int"/>
				<t path="Null"><c path="python.Bytes"/></t>
			</f>
			<meta><m n=":value"><e>{ n : -1 }</e></m></meta>
		</read1>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"BufferedIOBase"</e>
</m></meta>
	</class>
	<class path="python.lib.io.IRawIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/RawIOBase.hx" module="python.lib.io.RawIOBase" extern="1" interface="1">
		<readall public="1" set="method"><f a=""><c path="python.Bytes"/></f></readall>
		<read public="1" set="method">
			<f a="?n" v="-1">
				<x path="Int"/>
				<t path="Null"><c path="python.Bytes"/></t>
			</f>
			<meta><m n=":value"><e>{ n : -1 }</e></m></meta>
		</read>
		<write public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<t path="Null"><x path="Int"/></t>
</f></write>
		<readinto public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<t path="Null"><x path="Int"/></t>
</f></readinto>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.io.RawIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/RawIOBase.hx" extern="1">
		<extends path="python.lib.io.IOBase"/>
		<readall public="1" set="method"><f a=""><c path="python.Bytes"/></f></readall>
		<read public="1" set="method">
			<f a="?n" v="-1">
				<x path="Int"/>
				<t path="Null"><c path="python.Bytes"/></t>
			</f>
			<meta><m n=":value"><e>{ n : -1 }</e></m></meta>
		</read>
		<write public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<t path="Null"><x path="Int"/></t>
</f></write>
		<readinto public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<t path="Null"><x path="Int"/></t>
</f></readinto>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"RawIOBase"</e>
</m></meta>
	</class>
	<class path="python.lib.io.FileIO" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/FileIO.hx" extern="1">
		<extends path="python.lib.io.RawIOBase"/>
		<mode public="1">
			<c path="String"/>
			<haxe_doc>The mode as given in the constructor.</haxe_doc>
		</mode>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The file name. This is the file descriptor of the file when no name is given in the constructor.</haxe_doc>
		</name>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"FileIO"</e>
</m></meta>
	</class>
	<abstract path="python.lib.io.SeekSet" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/IOBase.hx" module="python.lib.io.IOBase">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="python.lib.io._IOBase.SeekSet_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/IOBase.hx" private="1" module="python.lib.io.IOBase"><meta>
	<m n=":keep"/>
	<m n=":final"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="python.lib.io.ITextIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/TextIOBase.hx" module="python.lib.io.TextIOBase" extern="1" interface="1">
		<encoding public="1"><c path="String"/></encoding>
		<error public="1"><c path="String"/></error>
		<newlines public="1"><t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="python.Tuple"><c path="String"/></c>
</x></t></newlines>
		<buffer public="1"><c path="python.lib.io.BufferedIOBase"/></buffer>
		<detach public="1" set="method"><f a=""><c path="python.lib.io.BufferedIOBase"/></f></detach>
		<write public="1" set="method"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></write>
		<read public="1" set="method"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></read>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.io.TextIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/TextIOBase.hx" extern="1">
		<extends path="python.lib.io.IOBase"/>
		<encoding public="1"><c path="String"/></encoding>
		<error public="1"><c path="String"/></error>
		<newlines public="1"><t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="python.Tuple"><c path="String"/></c>
</x></t></newlines>
		<detach public="1" set="method"><f a=""><c path="python.lib.io.BufferedIOBase"/></f></detach>
		<write public="1" set="method"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></write>
		<read public="1" set="method"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></read>
		<buffer public="1"><c path="python.lib.io.BufferedIOBase"/></buffer>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"TextIOBase"</e>
</m></meta>
	</class>
	<class path="python.lib.io.StringIO" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/StringIO.hx" extern="1">
		<extends path="python.lib.io.TextIOBase"/>
		<getvalue public="1" set="method"><f a=""><c path="String"/></f></getvalue>
		<new public="1" set="method"><f a="?s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"StringIO"</e>
</m></meta>
	</class>
	<typedef path="python.lib.json.JSONEncoderOptions" params="" file="C:\HaxeToolkit\haxe\std/python/lib/json/JSONEncoder.hx" module="python.lib.json.JSONEncoder"><a>
	<sort_keys>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</sort_keys>
	<skipkeys>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</skipkeys>
	<separators>
		<t path="Null"><c path="python.Tuple2">
	<c path="String"/>
	<c path="String"/>
</c></t>
		<meta><m n=":optional"/></meta>
	</separators>
	<indent>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</indent>
	<ensure_ascii>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</ensure_ascii>
	<def>
		<t path="Null"><f a="">
	<d/>
	<c path="String"/>
</f></t>
		<meta>
			<m n=":optional"/>
			<m n=":native"><e>"default"</e></m>
		</meta>
	</def>
	<check_circular>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</check_circular>
	<allow_nan>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</allow_nan>
</a></typedef>
	<class path="python.lib.json.JSONEncoder" params="" file="C:\HaxeToolkit\haxe\std/python/lib/json/JSONEncoder.hx" extern="1">
		<def public="1" set="method">
			<f a="o">
				<d/>
				<d/>
			</f>
			<meta><m n=":native"><e>"default"</e></m></meta>
		</def>
		<encode public="1" set="method"><f a="o">
	<d/>
	<c path="String"/>
</f></encode>
		<new public="1" set="method"><f a="?options">
	<x path="python.KwArgs"><t path="python.lib.json.JSONEncoderOptions"/></x>
	<x path="Void"/>
</f></new>
		<meta><m n=":pythonImport">
	<e>"json"</e>
	<e>"JSONEncoder"</e>
</m></meta>
	</class>
	<class path="python.lib.time.StructTime" params="" file="C:\HaxeToolkit\haxe\std/python/lib/time/StructTime.hx" extern="1"><meta><m n=":pythonImport">
	<e>"time"</e>
	<e>"struct_time"</e>
</m></meta></class>
	<class path="python.lib.urllib.Parse" params="" file="C:\HaxeToolkit\haxe\std/python/lib/urllib/Parse.hx" extern="1">
		<quote public="1" set="method" static="1"><f a="s:?safe">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<unquote public="1" set="method" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></unquote>
		<meta><m n=":pythonImport"><e>"urllib.parse"</e></m></meta>
	</class>
</haxe>