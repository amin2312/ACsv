# Generated by Haxe 3.4.7
# coding: utf-8

import math as python_lib_Math
import math as Math
import functools as python_lib_Functools
import inspect as python_lib_Inspect
import json as python_lib_Json
import random as python_lib_Random


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            _this = self.params
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")



class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field", "getProperty", "setProperty"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)

    @staticmethod
    def getProperty(o,field):
        if (o is None):
            return None
        if (field in python_Boot.keywords):
            field = ("_hx_" + field)
        elif ((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95))):
            field = ("_hx_" + field)
        else:
            field = field
        tmp = Reflect.field(o,("get_" + ("null" if field is None else field)))
        if ((tmp is not None) and callable(tmp)):
            return tmp()
        else:
            return Reflect.field(o,field)

    @staticmethod
    def setProperty(o,field,value):
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,("set_" + ("null" if field1 is None else field1))):
            getattr(o,("set_" + ("null" if field1 is None else field1)))(value)
        else:
            setattr(o,field1,value)


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["parseInt", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def parseInt(x):
        if (x is None):
            return None
        try:
            return int(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            try:
                prefix = HxString.substr(x,0,2).lower()
                if (prefix == "0x"):
                    return int(x,16)
                raise _HxException("fail")
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e1 = _hx_e1
                x1 = Std.parseFloat(x)
                r = None
                try:
                    r = int(x1)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    r = None
                if (r is None):
                    r1 = Std.shortenPossibleNumber(x)
                    if (r1 != x):
                        return Std.parseInt(r1)
                    else:
                        return None
                return r

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g1 = 0
        _g = len(x)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            else:
                _g21 = _g2
                if (((((((((((_g21 == 57) or ((_g21 == 56))) or ((_g21 == 55))) or ((_g21 == 54))) or ((_g21 == 53))) or ((_g21 == 52))) or ((_g21 == 51))) or ((_g21 == 50))) or ((_g21 == 49))) or ((_g21 == 48))) or ((_g21 == 46))):
                    r = (("null" if r is None else r) + ("null" if c is None else c))
                else:
                    break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN


class StringTools:
    _hx_class_name = "StringTools"
    __slots__ = ()
    _hx_statics = ["replace"]

    @staticmethod
    def replace(s,sub,by):
        _this = (list(s) if ((sub == "")) else s.split(sub))
        return by.join([python_Boot.toString1(x1,'') for x1 in _this])


class acsv_Field:
    _hx_class_name = "acsv.Field"
    __slots__ = ("fullName", "name", "type")
    _hx_fields = ["fullName", "name", "type"]

    def __init__(self):
        self.type = None
        self.name = None
        self.fullName = None



class acsv_Table:
    _hx_class_name = "acsv.Table"
    __slots__ = ("content", "head", "body", "_indexSet", "_selectd")
    _hx_fields = ["content", "head", "body", "_indexSet", "_selectd"]
    _hx_methods = ["merge", "createIndexAt", "getColumnIndexBy", "getCurrentSelectdData", "fmtRow", "fmtObj", "toFirstRow", "toLastRow", "toRows", "toFirstObj", "toLastObj", "toObjs", "selectAll", "selectFirstRow", "selectLastRow", "selectWhenE", "selectWhenE2", "selectWhenE3", "selectWhenG", "selectWhenL", "selectWhenGreaterAndLess", "selectWhenLessOrGreater"]
    _hx_statics = ["JSON_TYPES", "Parse", "textToArray", "arrayToRows"]

    def __init__(self):
        self._selectd = None
        self.content = None
        self._indexSet = _hx_AnonObject({})
        self.body = list()
        self.head = list()

    def merge(self,b):
        self.body = (self.body + b.body)
        _this = b.content
        index = _this.find("\r\n")
        if (index == -1):
            _this1 = b.content
            index = _this1.find("\n")
        c = HxString.substring(b.content,index,None)
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.content
        _hx_local_0.content = (("null" if _hx_local_1 is None else _hx_local_1) + ("null" if c is None else c))
        _hx_local_0.content

    def createIndexAt(self,colIndex):
        _hx_map = _hx_AnonObject({})
        _g1 = 0
        _g = len(self.body)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            row = (self.body[i] if i >= 0 and i < len(self.body) else None)
            key = (row[colIndex] if colIndex >= 0 and colIndex < len(row) else None)
            Reflect.setProperty(_hx_map,key,row)
        Reflect.setProperty(self._indexSet,(str(colIndex) + ""),_hx_map)

    def getColumnIndexBy(self,name):
        _g1 = 0
        _g = len(self.head)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            field = (self.head[i] if i >= 0 and i < len(self.head) else None)
            if (field.name == name):
                return i
        return -1

    def getCurrentSelectdData(self):
        return self._selectd

    def fmtRow(self,row):
        obj = []
        _g1 = 0
        _g = len(self.head)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            _hx_type = (self.head[i] if i >= 0 and i < len(self.head) else None).type
            val0 = (row[i] if i >= 0 and i < len(row) else None)
            val1 = None
            if (((_hx_type is not None) and ((_hx_type != ""))) and ((python_internal_ArrayImpl.indexOf(acsv_Table.JSON_TYPES,_hx_type,None) != -1))):
                if (val0 is not None):
                    val1 = python_lib_Json.loads(val0,**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'object_hook': python_Lib.dictToAnon})))
            else:
                val1 = val0
            obj.append(val1)
        return obj

    def fmtObj(self,row):
        obj = _hx_AnonObject({})
        _g1 = 0
        _g = len(self.head)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            name = (self.head[i] if i >= 0 and i < len(self.head) else None).name
            _hx_type = (self.head[i] if i >= 0 and i < len(self.head) else None).type
            val0 = (row[i] if i >= 0 and i < len(row) else None)
            val1 = None
            if (((_hx_type is not None) and ((_hx_type != ""))) and ((python_internal_ArrayImpl.indexOf(acsv_Table.JSON_TYPES,_hx_type,None) != -1))):
                if (val0 is not None):
                    val1 = python_lib_Json.loads(val0,**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'object_hook': python_Lib.dictToAnon})))
            else:
                val1 = val0
            Reflect.setProperty(obj,name,val1)
        return obj

    def toFirstRow(self):
        if ((self._selectd is None) or ((len(self._selectd) == 0))):
            return None
        return self.fmtRow((self._selectd[0] if 0 < len(self._selectd) else None))

    def toLastRow(self):
        if ((self._selectd is None) or ((len(self._selectd) == 0))):
            return None
        return self.fmtRow(python_internal_ArrayImpl._get(self._selectd, (len(self._selectd) - 1)))

    def toRows(self):
        if (self._selectd is None):
            return None
        arr = list()
        _g1 = 0
        _g = len(self._selectd)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            row = (self._selectd[i] if i >= 0 and i < len(self._selectd) else None)
            x = self.fmtRow(row)
            arr.append(x)
        return arr

    def toFirstObj(self):
        if ((self._selectd is None) or ((len(self._selectd) == 0))):
            return None
        return self.fmtObj((self._selectd[0] if 0 < len(self._selectd) else None))

    def toLastObj(self):
        if ((self._selectd is None) or ((len(self._selectd) == 0))):
            return None
        return self.fmtObj(python_internal_ArrayImpl._get(self._selectd, (len(self._selectd) - 1)))

    def toObjs(self):
        if (self._selectd is None):
            return None
        arr = list()
        _g1 = 0
        _g = len(self._selectd)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            row = (self._selectd[i] if i >= 0 and i < len(self._selectd) else None)
            x = self.fmtObj(row)
            arr.append(x)
        return arr

    def selectAll(self):
        self._selectd = self.body
        return self

    def selectFirstRow(self):
        self._selectd = [(self.body[0] if 0 < len(self.body) else None)]
        return self

    def selectLastRow(self):
        self._selectd = [python_internal_ArrayImpl._get(self.body, (len(self.body) - 1))]
        return self

    def selectWhenE(self,limit,value,colIndex = 0):
        if (colIndex is None):
            colIndex = 0
        if (limit == 1):
            _hx_map = Reflect.getProperty(self._indexSet,(str(colIndex) + ""))
            if (_hx_map is not None):
                val = HxOverrides.arrayGet(_hx_map, value)
                if (val is not None):
                    self._selectd = [val]
                else:
                    self._selectd = None
                return self
        rows = list()
        _g1 = 0
        _g = len(self.body)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            row = (self.body[i] if i >= 0 and i < len(self.body) else None)
            if HxOverrides.eq((row[colIndex] if colIndex >= 0 and colIndex < len(row) else None),value):
                rows.append(row)
                limit = (limit - 1)
                if (limit == 0):
                    break
        self._selectd = rows
        return self

    def selectWhenE2(self,limit,value1,value2,colIndex2 = 1,colIndex1 = 0):
        if (colIndex2 is None):
            colIndex2 = 1
        if (colIndex1 is None):
            colIndex1 = 0
        rows = list()
        _g1 = 0
        _g = len(self.body)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            row = (self.body[i] if i >= 0 and i < len(self.body) else None)
            if (HxOverrides.eq((row[colIndex1] if colIndex1 >= 0 and colIndex1 < len(row) else None),value1) and (HxOverrides.eq((row[colIndex2] if colIndex2 >= 0 and colIndex2 < len(row) else None),value2))):
                rows.append(row)
                limit = (limit - 1)
                if (limit == 0):
                    break
        self._selectd = rows
        return self

    def selectWhenE3(self,limit,value1,value2,value3,colIndex3 = 2,colIndex2 = 1,colIndex1 = 0):
        if (colIndex3 is None):
            colIndex3 = 2
        if (colIndex2 is None):
            colIndex2 = 1
        if (colIndex1 is None):
            colIndex1 = 0
        rows = list()
        _g1 = 0
        _g = len(self.body)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            row = (self.body[i] if i >= 0 and i < len(self.body) else None)
            if ((HxOverrides.eq((row[colIndex1] if colIndex1 >= 0 and colIndex1 < len(row) else None),value1) and (HxOverrides.eq((row[colIndex2] if colIndex2 >= 0 and colIndex2 < len(row) else None),value2))) and (HxOverrides.eq((row[colIndex3] if colIndex3 >= 0 and colIndex3 < len(row) else None),value3))):
                rows.append(row)
                limit = (limit - 1)
                if (limit == 0):
                    break
        self._selectd = rows
        return self

    def selectWhenG(self,limit,withEqu,value,colIndex = 0):
        if (colIndex is None):
            colIndex = 0
        rows = list()
        _g1 = 0
        _g = len(self.body)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            row = (self.body[i] if i >= 0 and i < len(self.body) else None)
            rowVal = (row[colIndex] if colIndex >= 0 and colIndex < len(row) else None)
            if ((rowVal > value) or ((withEqu and ((rowVal == value))))):
                rows.append(row)
                limit = (limit - 1)
                if (limit == 0):
                    break
        self._selectd = rows
        return self

    def selectWhenL(self,limit,withEqu,value,colIndex = 0):
        if (colIndex is None):
            colIndex = 0
        rows = list()
        _g1 = 0
        _g = len(self.body)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            row = (self.body[i] if i >= 0 and i < len(self.body) else None)
            rowVal = (row[colIndex] if colIndex >= 0 and colIndex < len(row) else None)
            if ((rowVal < value) or ((withEqu and ((rowVal == value))))):
                rows.append(row)
                limit = (limit - 1)
                if (limit == 0):
                    break
        self._selectd = rows
        return self

    def selectWhenGreaterAndLess(self,limit,GWithEqu,LWithEqu,GValue,LValue,colIndex = 0):
        if (colIndex is None):
            colIndex = 0
        rows = list()
        _g1 = 0
        _g = len(self.body)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            row = (self.body[i] if i >= 0 and i < len(self.body) else None)
            rowVal = (row[colIndex] if colIndex >= 0 and colIndex < len(row) else None)
            v1 = ((rowVal > GValue) or ((GWithEqu and ((rowVal == GValue)))))
            v2 = ((rowVal < LValue) or ((LWithEqu and ((rowVal == LValue)))))
            if (v1 and v2):
                rows.append(row)
                limit = (limit - 1)
                if (limit == 0):
                    break
        self._selectd = rows
        return self

    def selectWhenLessOrGreater(self,limit,LWithEqu,GWithEqu,LValue,GValue,colIndex = 0):
        if (colIndex is None):
            colIndex = 0
        rows = list()
        _g1 = 0
        _g = len(self.body)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            row = (self.body[i] if i >= 0 and i < len(self.body) else None)
            rowVal = (row[colIndex] if colIndex >= 0 and colIndex < len(row) else None)
            v1 = ((rowVal < LValue) or ((LWithEqu and ((rowVal == LValue)))))
            v2 = ((rowVal > GValue) or ((GWithEqu and ((rowVal == GValue)))))
            if (v1 or v2):
                rows.append(row)
                limit = (limit - 1)
                if (limit == 0):
                    break
        self._selectd = rows
        return self

    @staticmethod
    def Parse(content):
        table = acsv_Table.arrayToRows(acsv_Table.textToArray(content))
        table.content = content
        return table

    @staticmethod
    def textToArray(text):
        array = []
        maxLen = len(text)
        ptr = text
        ptrPos = 0
        while True:
            curLen = (maxLen - ptrPos)
            cellIndexA = 0
            cellIndexB = 0
            cells = []
            cell = None
            _hx_chr = None
            while (cellIndexB < curLen):
                cellIndexA = cellIndexB
                index = (ptrPos + cellIndexB)
                if ((index < 0) or ((index >= len(ptr)))):
                    _hx_chr = ""
                else:
                    _hx_chr = ptr[index]
                if ((_hx_chr == "\n") or ((_hx_chr == "\r\n"))):
                    cellIndexB = (cellIndexB + 1)
                    break
                tmp = None
                if (_hx_chr == "\r"):
                    index1 = ((ptrPos + cellIndexB) + 1)
                    tmp = ((("" if (((index1 < 0) or ((index1 >= len(ptr))))) else ptr[index1])) == "\n")
                else:
                    tmp = False
                if tmp:
                    cellIndexB = (cellIndexB + 2)
                    break
                if (_hx_chr == ","):
                    cell = ""
                    nextPos = ((ptrPos + cellIndexB) + 1)
                    if (nextPos >= maxLen):
                        _hx_chr = "\n"
                    elif ((nextPos < 0) or ((nextPos >= len(ptr)))):
                        _hx_chr = ""
                    else:
                        _hx_chr = ptr[nextPos]
                    if ((((cellIndexA == 0) or ((_hx_chr == ","))) or ((_hx_chr == "\n"))) or ((_hx_chr == "\r\n"))):
                        cellIndexB = (cellIndexB + 1)
                        cells.append("")
                    else:
                        tmp1 = None
                        if (_hx_chr == "\r"):
                            index2 = ((ptrPos + cellIndexB) + 2)
                            tmp1 = ((("" if (((index2 < 0) or ((index2 >= len(ptr))))) else ptr[index2])) == "\n")
                        else:
                            tmp1 = False
                        if tmp1:
                            cellIndexB = (cellIndexB + 2)
                            cells.append("")
                        else:
                            cellIndexB = (cellIndexB + 1)
                elif (_hx_chr == "\""):
                    cellIndexB = (cellIndexB + 1)
                    while True:
                        startIndex = (ptrPos + cellIndexB)
                        cellIndexB = (ptr.find("\"") if ((startIndex is None)) else ptr.find("\"", startIndex))
                        if (cellIndexB == -1):
                            print("[ACsv] Invalid Double Quote")
                            return None
                        cellIndexB = (cellIndexB - ptrPos)
                        index3 = ((ptrPos + cellIndexB) + 1)
                        if ((("" if (((index3 < 0) or ((index3 >= len(ptr))))) else ptr[index3])) == "\""):
                            cellIndexB = (cellIndexB + 2)
                            continue
                        break
                    cell = HxString.substring(ptr,((ptrPos + cellIndexA) + 1),(ptrPos + cellIndexB))
                    cell = StringTools.replace(cell,"\"\"","\"")
                    cells.append(cell)
                    cellIndexB = (cellIndexB + 1)
                else:
                    startIndex1 = (ptrPos + cellIndexB)
                    indexA = (ptr.find(",") if ((startIndex1 is None)) else ptr.find(",", startIndex1))
                    if (indexA == -1):
                        indexA = curLen
                    else:
                        indexA = (indexA - ptrPos)
                    startIndex2 = (ptrPos + cellIndexB)
                    indexB = (ptr.find("\r\n") if ((startIndex2 is None)) else ptr.find("\r\n", startIndex2))
                    if (indexB == -1):
                        startIndex3 = (ptrPos + cellIndexB)
                        indexB = (ptr.find("\n") if ((startIndex3 is None)) else ptr.find("\n", startIndex3))
                        if (indexB == -1):
                            indexB = curLen
                        else:
                            indexB = (indexB - ptrPos)
                    else:
                        indexB = (indexB - ptrPos)
                    cellIndexB = indexA
                    if (indexB < indexA):
                        cellIndexB = indexB
                    cell = HxString.substring(ptr,(ptrPos + cellIndexA),(ptrPos + cellIndexB))
                    cells.append(cell)
            array.append(cells)
            ptrPos = (ptrPos + cellIndexB)
            if (ptrPos >= maxLen):
                break
        return array

    @staticmethod
    def arrayToRows(array):
        head = (None if ((len(array) == 0)) else array.pop(0))
        body = array
        fileds = list()
        _g1 = 0
        _g = len(head)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            fullName = (head[i] if i >= 0 and i < len(head) else None)
            parts = fullName.split(":")
            filed = acsv_Field()
            filed.fullName = fullName
            filed.name = (parts[0] if 0 < len(parts) else None)
            filed.type = (parts[1] if 1 < len(parts) else None)
            fileds.append(filed)
        _g11 = 0
        _g2 = len(body)
        while (_g11 < _g2):
            i1 = _g11
            _g11 = (_g11 + 1)
            row = (body[i1] if i1 >= 0 and i1 < len(body) else None)
            _g3 = 0
            _g21 = len(row)
            while (_g3 < _g21):
                j = _g3
                _g3 = (_g3 + 1)
                _hx_type = (fileds[j] if j >= 0 and j < len(fileds) else None).type
                cell = (row[j] if j >= 0 and j < len(row) else None)
                newVal = cell
                isEmptyCell = ((cell is None) or ((cell == "")))
                if (_hx_type == "bool"):
                    if ((isEmptyCell or ((cell == "false"))) or ((cell == "0"))):
                        newVal = False
                    else:
                        newVal = True
                elif (_hx_type == "int"):
                    if isEmptyCell:
                        newVal = 0
                    else:
                        newVal = Std.parseInt(newVal)
                elif (_hx_type == "number"):
                    if isEmptyCell:
                        newVal = 0.0
                    else:
                        newVal = Std.parseFloat(newVal)
                elif (_hx_type == "json"):
                    if isEmptyCell:
                        newVal = None
                    else:
                        chr0 = ("" if ((0 >= len(cell))) else cell[0])
                        if (not (((chr0 == "[") or ((chr0 == "{"))))):
                            print(str(((("[ACsv] Invalid json format:" + HxOverrides.stringOrNull((fileds[j] if j >= 0 and j < len(fileds) else None).name)) + ",") + ("null" if cell is None else cell))))
                            return None
                        newVal = cell
                elif (_hx_type == "strings"):
                    if isEmptyCell:
                        newVal = "[]"
                    else:
                        _this = cell.split(",")
                        newVal = (("[\"" + HxOverrides.stringOrNull("\",\"".join([python_Boot.toString1(x1,'') for x1 in _this]))) + "\"]")
                python_internal_ArrayImpl._set(row, j, newVal)
            python_internal_ArrayImpl._set(body, i1, row)
        table = acsv_Table()
        table.head = fileds
        table.body = body
        return table



class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if isinstance(o,int):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g1 = 0
            _g = l
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o2 = o
                l1 = len(o2.params)
                hasParams = (l1 > 0)
                if hasParams:
                    paramsStr = ""
                    _g12 = 0
                    _g3 = l1
                    while (_g12 < _g3):
                        i1 = _g12
                        _g12 = (_g12 + 1)
                        prefix1 = ""
                        if (i1 > 0):
                            prefix1 = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields1 = python_Boot.getInstanceFields(o)
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    return toStr1
                else:
                    fields2 = python_Boot.getClassFields(o)
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    return toStr2
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d1 = o.__dict__
                keys1 = d1.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        field1 = field
        _hx_local_0 = len(field1)
        if (_hx_local_0 == 10):
            if (field1 == "charCodeAt"):
                if isinstance(o,str):
                    s1 = o
                    def _hx_local_1(a11):
                        return HxString.charCodeAt(s1,a11)
                    return _hx_local_1
        elif (_hx_local_0 == 11):
            if (field1 == "lastIndexOf"):
                if isinstance(o,str):
                    s3 = o
                    def _hx_local_2(a15):
                        return HxString.lastIndexOf(s3,a15)
                    return _hx_local_2
                elif isinstance(o,list):
                    a4 = o
                    def _hx_local_3(x4):
                        return python_internal_ArrayImpl.lastIndexOf(a4,x4)
                    return _hx_local_3
            elif (field1 == "toLowerCase"):
                if isinstance(o,str):
                    s7 = o
                    def _hx_local_4():
                        return HxString.toLowerCase(s7)
                    return _hx_local_4
            elif (field1 == "toUpperCase"):
                if isinstance(o,str):
                    s9 = o
                    def _hx_local_5():
                        return HxString.toUpperCase(s9)
                    return _hx_local_5
        elif (_hx_local_0 == 9):
            if (field1 == "substring"):
                if isinstance(o,str):
                    s6 = o
                    def _hx_local_6(a19):
                        return HxString.substring(s6,a19)
                    return _hx_local_6
        elif (_hx_local_0 == 4):
            if (field1 == "copy"):
                if isinstance(o,list):
                    def _hx_local_7():
                        return list(o)
                    return _hx_local_7
            elif (field1 == "join"):
                if isinstance(o,list):
                    def _hx_local_8(sep):
                        return sep.join([python_Boot.toString1(x1,'') for x1 in o])
                    return _hx_local_8
            elif (field1 == "push"):
                if isinstance(o,list):
                    x7 = o
                    def _hx_local_9(e):
                        return python_internal_ArrayImpl.push(x7,e)
                    return _hx_local_9
            elif (field1 == "sort"):
                if isinstance(o,list):
                    x11 = o
                    def _hx_local_10(f2):
                        python_internal_ArrayImpl.sort(x11,f2)
                    return _hx_local_10
        elif (_hx_local_0 == 5):
            if (field1 == "shift"):
                if isinstance(o,list):
                    x9 = o
                    def _hx_local_11():
                        return python_internal_ArrayImpl.shift(x9)
                    return _hx_local_11
            elif (field1 == "slice"):
                if isinstance(o,list):
                    x10 = o
                    def _hx_local_12(a16):
                        return python_internal_ArrayImpl.slice(x10,a16)
                    return _hx_local_12
            elif (field1 == "split"):
                if isinstance(o,str):
                    s4 = o
                    def _hx_local_13(d):
                        return HxString.split(s4,d)
                    return _hx_local_13
        elif (_hx_local_0 == 7):
            if (field1 == "indexOf"):
                if isinstance(o,str):
                    s2 = o
                    def _hx_local_14(a13):
                        return HxString.indexOf(s2,a13)
                    return _hx_local_14
                elif isinstance(o,list):
                    a = o
                    def _hx_local_15(x1):
                        return python_internal_ArrayImpl.indexOf(a,x1)
                    return _hx_local_15
            elif (field1 == "reverse"):
                if isinstance(o,list):
                    a5 = o
                    def _hx_local_16():
                        python_internal_ArrayImpl.reverse(a5)
                    return _hx_local_16
            elif (field1 == "unshift"):
                if isinstance(o,list):
                    x14 = o
                    def _hx_local_17(e2):
                        python_internal_ArrayImpl.unshift(x14,e2)
                    return _hx_local_17
        elif (_hx_local_0 == 3):
            if (field1 == "map"):
                if isinstance(o,list):
                    x5 = o
                    def _hx_local_18(f1):
                        return python_internal_ArrayImpl.map(x5,f1)
                    return _hx_local_18
            elif (field1 == "pop"):
                if isinstance(o,list):
                    x6 = o
                    def _hx_local_19():
                        return python_internal_ArrayImpl.pop(x6)
                    return _hx_local_19
        elif (_hx_local_0 == 8):
            if (field1 == "iterator"):
                if isinstance(o,list):
                    x3 = o
                    def _hx_local_20():
                        return python_internal_ArrayImpl.iterator(x3)
                    return _hx_local_20
            elif (field1 == "toString"):
                if isinstance(o,str):
                    s8 = o
                    def _hx_local_21():
                        return HxString.toString(s8)
                    return _hx_local_21
                elif isinstance(o,list):
                    x13 = o
                    def _hx_local_22():
                        return python_internal_ArrayImpl.toString(x13)
                    return _hx_local_22
        elif (_hx_local_0 == 6):
            if (field1 == "charAt"):
                if isinstance(o,str):
                    s = o
                    def _hx_local_23(a1):
                        return HxString.charAt(s,a1)
                    return _hx_local_23
            elif (field1 == "concat"):
                if isinstance(o,list):
                    a12 = o
                    def _hx_local_24(a2):
                        return python_internal_ArrayImpl.concat(a12,a2)
                    return _hx_local_24
            elif (field1 == "filter"):
                if isinstance(o,list):
                    x = o
                    def _hx_local_25(f):
                        return python_internal_ArrayImpl.filter(x,f)
                    return _hx_local_25
            elif (field1 == "insert"):
                if isinstance(o,list):
                    a3 = o
                    def _hx_local_26(a14,x2):
                        python_internal_ArrayImpl.insert(a3,a14,x2)
                    return _hx_local_26
            elif (field1 == "length"):
                if isinstance(o,str):
                    return len(o)
                elif isinstance(o,list):
                    return len(o)
            elif (field1 == "remove"):
                if isinstance(o,list):
                    x8 = o
                    def _hx_local_27(e1):
                        return python_internal_ArrayImpl.remove(x8,e1)
                    return _hx_local_27
            elif (field1 == "splice"):
                if isinstance(o,list):
                    x12 = o
                    def _hx_local_28(a17,a21):
                        return python_internal_ArrayImpl.splice(x12,a17,a21)
                    return _hx_local_28
            elif (field1 == "substr"):
                if isinstance(o,str):
                    s5 = o
                    def _hx_local_29(a18):
                        return HxString.substr(s5,a18)
                    return _hx_local_29
        else:
            pass
        field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field2):
            return getattr(o,field2)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        f = (c._hx_fields if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has



class python__KwArgs_KwArgs_Impl_:
    _hx_class_name = "python._KwArgs.KwArgs_Impl_"
    __slots__ = ()
    _hx_statics = ["fromT"]

    @staticmethod
    def fromT(d):
        this1 = python_Lib.anonAsDict(d)
        return this1


class python_Lib:
    _hx_class_name = "python.Lib"
    __slots__ = ()
    _hx_statics = ["dictToAnon", "anonToDict", "anonAsDict", "dictAsAnon"]

    @staticmethod
    def dictToAnon(v):
        return _hx_AnonObject(v.copy())

    @staticmethod
    def anonToDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__.copy()
        else:
            return None

    @staticmethod
    def anonAsDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__
        else:
            return None

    @staticmethod
    def dictAsAnon(d):
        return _hx_AnonObject(d)


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "iterator", "indexOf", "lastIndexOf", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get", "_set"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g1 = l
        _g = _hx_len
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            if (a[i] == x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if (a[l] == x):
                return l
        return -1

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None

    @staticmethod
    def _set(x,idx,v):
        l = len(x)
        while (l < idx):
            x.append(None)
            l = (l + 1)
        if (l == idx):
            x.append(v)
        else:
            x[idx] = v
        return v


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = Exception


    def __init__(self,val):
        self.val = None
        message = str(val)
        super().__init__(message)
        self.val = val



class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "arrayGet", "mapKwArgs"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def arrayGet(a,i):
        if isinstance(a,list):
            x = a
            if ((i > -1) and ((i < len(x)))):
                return x[i]
            else:
                return None
        else:
            return a[i]

    @staticmethod
    def mapKwArgs(a,v):
        a1 = python_Lib.dictAsAnon(python_Lib.anonToDict(a))
        k = python_HaxeIterator(iter(v.keys()))
        while k.hasNext():
            k1 = k.next()
            val = v.get(k1)
            if hasattr(a1,k1):
                x = getattr(a1,k1)
                setattr(a1,val,x)
                delattr(a1,k1)
        return a1


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            return s[startIndex:(startIndex + _hx_len)]

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

acsv_Table.JSON_TYPES = ["json", "strings"]
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")